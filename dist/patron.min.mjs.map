{"version":3,"file":"patron.min.mjs","sources":["../src/Guest/GuestAware.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Patron/PatronPool.ts","../src/Source/Source.ts","../src/Guest/GuestObject.ts","../src/Guest/GuestPool.ts","../src/Guest/GuestAwareAll.ts","../src/Source/SourceEmpty.ts","../src/Guest/GuestAwareSequence.ts","../src/Guest/GuestAwareMap.ts","../src/Guest/GuestAwareRace.ts","../src/Guest/GuestAwareActive.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Source/SourceDynamic.ts","../src/Factory/Factory.ts","../src/Factory/Module.ts"],"sourcesContent":["import { GuestType } from \"./Guest\";\n\nexport type GuestAwareExecutorType<T> = (guest: GuestType<T>) => unknown;\n\nexport interface GuestAwareObjectType<T> {\n  value: GuestAwareExecutorType<T>\n}\n\nexport type GuestAwareType<T = any> = GuestAwareExecutorType<T> | GuestAwareObjectType<T>\n\nexport function value<T>(guestAware: GuestAwareType<T>, guest: GuestType<T>) {\n  if (typeof guestAware === 'function') {\n    return guestAware(guest);\n  } else {\n    return guestAware.value(guest);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware\n */\nexport class GuestAware<T = any> implements GuestAwareObjectType<T> {\n  public constructor(private guestAware: GuestAwareType<T>) { }\n\n  public value(guest: GuestType<T>): GuestType<T> {\n    value(this.guestAware, guest);\n    return guest;\n  }\n}\n","type GuestIntroduction = \"guest\" | \"patron\";\n\nexport interface GiveOptions {\n  data?: unknown;\n}\n\nexport type GuestExecutorType<T = any> = (\n  value: T,\n  options?: GiveOptions,\n) => void;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T, options?: GiveOptions): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/give\n */\nexport function give<T>(data: T, guest: GuestType<T>, options?: GiveOptions) {\n  if (typeof guest === \"function\") {\n    guest(data, options);\n  } else {\n    guest.give(data, options);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest\n */\nexport class Guest<T> implements GuestObjectType<T> {\n  public constructor(private receiver: GuestExecutorType<T>) { }\n\n  public give(value: T, options?: GiveOptions) {\n    this.receiver(value, options);\n    return this;\n  }\n}\n","import {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"./GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"./Guest\";\nimport { PoolAwareOptions } from \"../Patron/PatronOnce\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-cast\n */\nexport class GuestCast<T> implements GuestDisposableType<T> {\n  public constructor(\n    private sourceGuest: GuestType<any>,\n    private targetGuest: GuestType<T>,\n  ) { }\n\n  public introduction() {\n    if (typeof this.sourceGuest === \"function\") {\n      return \"guest\";\n    }\n    if (!this.sourceGuest.introduction) {\n      return \"guest\";\n    }\n    return this.sourceGuest.introduction();\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.targetGuest, {\n      ...options,\n      data: {\n        ...(options?.data ?? {}),\n        castedGuest: (options?.data as PoolAwareOptions)?.castedGuest ?? this,\n      }\n    });\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.sourceGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"../Guest/Guest\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T, options?: GiveOptions) => this;\n\n  public constructor(private initiator: unknown) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    let lastMicrotask: (() => void) | null = null;\n    const doReceive = (value: T, options?: GiveOptions) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target, options);\n      });\n    };\n    this.give = (value: T, options?: GiveOptions) => {\n      const currentMicroTask = () => {\n        if (currentMicroTask === lastMicrotask) {\n          doReceive(value, options);\n        }\n      };\n      lastMicrotask = currentMicroTask;\n      queueMicrotask(currentMicroTask);\n      return this;\n    };\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron, {});\n    return this;\n  }\n\n  private sendValueToGuest(\n    value: T,\n    guest: GuestType<T>,\n    options?: GiveOptions,\n  ) {\n    const isDisposed = this.guestDisposed(value, guest);\n\n    if (!isDisposed) {\n      give(value, guest, {\n        ...options,\n        data: {\n          ...((options?.data as Record<string, unknown>) ?? {}),\n          initiator: this.initiator,\n          pool: this,\n        },\n      });\n    }\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestAwareObjectType } from \"../Guest/GuestAware\";\nimport { PatronPool } from \"../Patron/PatronPool\";\n\nexport interface PoolAware<T = any> {\n  pool(): PatronPool<T>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source\n */\nexport type SourceType<T = any> = GuestAwareObjectType<T> &\n  GuestObjectType<T> &\n  PoolAware<T>;\n\nexport class Source<T> implements SourceType<T> {\n  private thePool = new PatronPool(this);\n\n  public constructor(private sourceDocument: T) { }\n\n  public pool() {\n    return this.thePool;\n  }\n\n  public give(value: T): this {\n    this.sourceDocument = value;\n    this.thePool.give(this.sourceDocument);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    if (typeof guest === \"function\") {\n      this.thePool.distribute(this.sourceDocument, new Guest(guest));\n    } else {\n      this.thePool.distribute(this.sourceDocument, guest);\n    }\n    return this;\n  }\n}\n","import {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"./GuestDisposable\";\nimport { GiveOptions, Guest, GuestType } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-object\n */\nexport class GuestObject<T> implements GuestDisposableType<T> {\n  public constructor(private baseGuest: GuestType<T>) { }\n\n  public give(value: T, options?: GiveOptions): this {\n    let guest = this.baseGuest;\n    if (typeof guest === \"function\") {\n      guest = new Guest(guest);\n    }\n    guest.give(value, options);\n    return this;\n  }\n\n  public introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n    return this.baseGuest.introduction();\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { PoolType } from \"../Patron/PatronPool\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-pool\n */\nexport class GuestPool<T> implements GuestObjectType<T>, PoolType<T> {\n  private guests = new Set<GuestType<T>>();\n\n  private patronPool: PatronPool<T>;\n\n  public constructor(initiator: unknown) {\n    this.patronPool = new PatronPool(initiator);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    this.deliverToGuests(value, options);\n    this.patronPool.give(value, options);\n    return this;\n  }\n\n  public add(guest: GuestType<T>): this {\n    if (\n      typeof guest === \"function\" ||\n      !guest.introduction ||\n      guest.introduction() === \"guest\"\n    ) {\n      this.guests.add(guest);\n    }\n    this.patronPool.add(guest);\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>): this {\n    this.guests.delete(patron);\n    this.patronPool.remove(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestObjectType<T>): this {\n    this.add(possiblePatron);\n    this.give(receiving);\n    return this;\n  }\n\n  public size() {\n    return this.patronPool.size() + this.guests.size;\n  }\n\n  private deliverToGuests(value: T, options?: GiveOptions) {\n    this.guests.forEach((target) => {\n      give(value, target, options);\n    });\n    this.guests.clear();\n  }\n}\n","import { GuestAwareObjectType } from \"src/Guest/GuestAware\";\nimport { Source } from \"../Source/Source\";\nimport { Guest, GuestObjectType, GuestType } from \"./Guest\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestObject } from \"./GuestObject\";\nimport { GuestPool } from \"./GuestPool\";\n\nexport interface GuestAwareAllType<T = any> extends GuestAwareObjectType<T> {\n  valueArray(guest: GuestObjectType<T>): this;\n  guestKey<R>(key: string): GuestObjectType<R>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-all\n */\nexport class GuestAwareAll<T> implements GuestAwareAllType<T> {\n  private theAll: Source<Record<string, unknown>>;\n\n  private keysKnown = new Set();\n\n  private keysFilled = new Set();\n\n  private filledAllPool = new GuestPool(this);\n\n  public constructor() {\n    this.theAll = new Source<Record<string, unknown>>({});\n  }\n\n  public valueArray(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    this.filledAllPool.add(\n      new GuestCast(guestObject, (value: Record<string, unknown>) => {\n        guestObject.give(Object.values(value) as T);\n      }),\n    );\n    if (this.isAllFilled()) {\n      this.theAll.value(\n        new Guest((all: Record<string, unknown>) => {\n          this.filledAllPool.give(Object.values(all));\n        }),\n      );\n    }\n    return this;\n  }\n\n  public value(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    if (this.isAllFilled()) {\n      this.filledAllPool.add(guestObject);\n      this.theAll.value(\n        new Guest((all) => {\n          this.filledAllPool.give(all);\n        }),\n      );\n    } else {\n      this.filledAllPool.add(guestObject);\n    }\n    return this;\n  }\n\n  public guestKey<R>(key: string): GuestObjectType<R> {\n    this.keysKnown.add(key);\n    return new Guest((value) => {\n      // Обернул в очередь чтобы можно было синхронно наполнить очередь известных ключей\n      queueMicrotask(() => {\n        this.theAll.value(\n          new Guest((all: Record<string, unknown>) => {\n            this.keysFilled.add(key);\n            const lastAll = {\n              ...all,\n              [key]: value,\n            };\n            this.theAll.give(lastAll);\n            if (this.isAllFilled()) {\n              this.filledAllPool.give(lastAll);\n            }\n          }),\n        );\n      });\n    });\n  }\n\n  private isAllFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { give, GuestType } from \"./../Guest/Guest\";\nimport { Source, SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source/source-empty\n */\nexport class SourceEmpty<T> implements SourceType<T> {\n  private baseSource = new Source<T | null>(null);\n\n  public value(guest: GuestType<T>) {\n    this.baseSource.value(\n      new GuestCast(guest as GuestType, (value, options) => {\n        if (value !== null) {\n          give(value, guest, options);\n        }\n      }),\n    );\n    return this;\n  }\n\n  public give(value: T): this {\n    this.baseSource.give(value);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    return this.baseSource.pool();\n  }\n}\n","import { FactoryType } from \"../Factory/Factory\";\nimport { give } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, value } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestAwareAll } from \"./GuestAwareAll\";\nimport { GuestType } from \"./Guest\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-sequence\n */\nexport class GuestAwareSequence<T, TG> implements GuestAwareObjectType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSourceFactory: FactoryType<GuestAwareType<TG>>\n  ) { }\n\n  public value(guest: GuestType<TG[]>) {\n    const all = new GuestAwareAll<TG[]>();\n    const sequenceSource = new SourceEmpty();\n    const targetSource = this.targetSourceFactory.create(\n      sequenceSource\n    )\n\n    value(\n      this.baseSource,\n      new GuestCast(guest, (theValue) => {\n        let index = 0;\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          } else {\n            all.valueArray(guest);\n          }\n        }\n\n        function handle() {\n          sequenceSource.give(theValue[index]);\n          value(targetSource, all.guestKey(index.toString()));\n          value(targetSource, nextItemHandle);\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n        } else {\n          give([], guest);\n        }\n      })\n    );\n    return this;\n  }\n}\n","import { FactoryType } from \"../Factory/Factory\";\nimport { give } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, value } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestAwareAll } from \"./GuestAwareAll\";\nimport { GuestType } from \"./Guest\";\nimport { GuestAware } from \"./GuestAware\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-map\n */\nexport class GuestAwareMap<T, TG> implements GuestAwareObjectType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSourceFactory: FactoryType<GuestAwareType<TG>>\n  ) { }\n\n  public value(guest: GuestType<TG[]>) {\n    const all = new GuestAwareAll();\n    value(\n      this.baseSource,\n      new GuestCast(<GuestType>guest, (theValue) => {\n        theValue.forEach((val, index) => {\n          const targetSource = this.targetSourceFactory.create(\n            new GuestAware((innerGuest) => {\n              give(val, innerGuest);\n            })\n          )\n          value(targetSource, all.guestKey(index.toString()));\n        });\n      })\n    )\n    all.valueArray(<GuestType>guest);\n    return this;\n  }\n}\n","import { give, GuestType } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, value } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-race\n */\nexport class GuestAwareRace<T> implements GuestAwareObjectType<T> {\n  public constructor(private guestAwares: GuestAwareType<T>[]) { }\n\n  public value(guest: GuestType<T>): this {\n    let connectedWithGuestAware: GuestAwareType | null = null;\n    this.guestAwares.forEach(guestAware => {\n      value(\n        guestAware,\n        new GuestCast(<GuestType>guest, (value) => {\n          if (!connectedWithGuestAware || connectedWithGuestAware === guestAware) {\n            give(value as T, guest);\n            connectedWithGuestAware = guestAware\n          }\n        })\n      );\n    });\n    return this;\n  }\n}\n","import { SourceType } from \"../Source/Source\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\nimport { GuestType } from \"./Guest\";\nimport { GuestAwareObjectType } from \"./GuestAware\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/action-type\n */\nexport interface ActionType<P = any> {\n  do(config: P): this;\n}\n\nexport interface GuestAwareAcitveType<R = unknown, T = unknown> extends GuestAwareObjectType<T>, ActionType<R> {\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-active\n */\nexport class GuestAwareActive<R, T> implements GuestAwareAcitveType<R, T> {\n  private source = new SourceEmpty<T>();\n\n  public constructor(private configExecutor: (config: R, source: SourceType<T>) => void) { }\n\n  public do(config: R): this {\n    this.configExecutor(config, this.source);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    this.source.value(guest);\n    return this;\n  }\n}\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-sync\n */\nexport class GuestSync<T> implements GuestValueType<T> {\n  public constructor(private theValue: T) { }\n\n  public give(value: T): this {\n    this.theValue = value;\n    return this;\n  }\n\n  public value() {\n    return this.theValue;\n  }\n}\n","import { give, GiveOptions, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-disposable\n */\nexport class GuestDisposable<T> implements GuestDisposableType<T> {\n  public constructor(\n    private guest: GuestType,\n    private disposeCheck: (value: T | null) => boolean,\n  ) { }\n\n  public disposed(value: T | null): boolean {\n    return this.disposeCheck(value);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.guest, options);\n    return this;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"../Guest/Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron\n */\nexport class Patron<T> implements GuestDisposableType<T> {\n  public constructor(private willBePatron: GuestType<T>) { }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.willBePatron, options);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.willBePatron as GuestDisposableType;\n    return maybeDisposable?.disposed?.(value) || false;\n  }\n}\n","import { PoolType } from \"./PatronPool\";\nimport { give, GuestType, GiveOptions, GuestObjectType } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\nexport type PoolAwareOptions = {\n  pool?: PoolType;\n  castedGuest?: GuestObjectType;\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-once\n */\nexport class PatronOnce<T> implements GuestDisposableType<T> {\n  private received = false;\n\n  public constructor(private baseGuest: GuestType<T>) { }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    if (!this.received) {\n      this.received = true;\n      give(value, this.baseGuest, options);\n    }\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    if (this.received) {\n      return true;\n    }\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestAwareType, value } from \"../Guest/GuestAware\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport { SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source-dynamic\n */\nexport class SourceDynamic<T = unknown> implements SourceType<T> {\n  public constructor(\n    private baseGuest: GuestType<T>,\n    private baseGuestAware: GuestAwareType<T>,\n  ) { }\n\n  public value(guest: GuestType<T>) {\n    value(this.baseGuestAware, guest);\n    return this;\n  }\n\n  public give(value: T) {\n    give(value, this.baseGuest);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    throw Error('No pool in SourceDynamic');\n  }\n}\n","interface Constructable<T> {\n  new(...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport interface FactoryType<T> {\n  create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/factory\n */\nexport class Factory<T> implements FactoryType<T> {\n  public constructor(\n    private constructorFn: Prototyped<T>,\n    private factories: Record<string, unknown> = {},\n  ) { }\n\n  public create<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return new (this.constructorFn as Constructable<T>)(\n      ...args,\n      this.factories,\n    ) as CT extends null ? T : CT;\n  }\n}\n","import { FactoryType } from \"./Factory\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/module\n */\nexport class Module<T> implements FactoryType<T> {\n  public constructor(private buildingFn: (...args: any[]) => T) { }\n\n  public create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n    return this.buildingFn(...args) as CT extends null ? T : CT;\n  }\n}\n"],"names":["value","guestAware","guest","GuestAware","constructor","this","give","data","options","Guest","receiver","GuestCast","sourceGuest","targetGuest","introduction","castedGuest","disposed","maybeDisposable","poolSets","Map","removePatronFromPools","patron","forEach","pool","delete","isPatronInPools","inPool","has","PatronPool","initiator","__publicField","patrons","Set","set","lastMicrotask","doReceive","target","sendValueToGuest","currentMicroTask","queueMicrotask","size","add","shouldBePatron","Error","remove","distribute","receiving","possiblePatron","guestDisposed","Source","sourceDocument","thePool","GuestObject","baseGuest","GuestPool","patronPool","deliverToGuests","guests","clear","GuestAwareAll","theAll","valueArray","guestObject","filledAllPool","Object","values","isAllFilled","all","guestKey","key","keysKnown","keysFilled","lastAll","SourceEmpty","baseSource","GuestAwareSequence","targetSourceFactory","sequenceSource","targetSource","create","theValue","index","nextItemHandle","handle","toString","GuestAwareMap","val","innerGuest","GuestAwareRace","guestAwares","connectedWithGuestAware","GuestAwareActive","configExecutor","config","source","GuestSync","GuestDisposable","disposeCheck","Patron","willBePatron","PatronOnce","received","SourceDynamic","baseGuestAware","Factory","constructorFn","factories","args","Module","buildingFn"],"mappings":"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"}