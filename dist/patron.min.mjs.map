{"version":3,"file":"patron.min.mjs","sources":["../src/Guest/GuestAware.ts","../src/Guest/Guest.ts","../src/Patron/PatronOnce.ts","../src/Guest/GuestCast.ts","../src/Patron/PatronPool.ts","../src/Source/Source.ts","../src/Source/SourceEmpty.ts","../src/Guest/GuestObject.ts","../src/Guest/GuestPool.ts","../src/Guest/GuestAwareAll.ts","../src/Guest/GuestAwareSequence.ts","../src/Guest/GuestAwareMap.ts","../src/Guest/GuestAwareRace.ts","../src/Guest/GuestAwareActive.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Patron/Patron.ts","../src/Source/SourceDynamic.ts","../src/Private/PrivateClass.ts","../src/Private/Private.ts"],"sourcesContent":["import { GuestType } from \"./Guest\";\n\nexport type GuestAwareExecutorType<T> = (guest: GuestType<T>) => unknown;\n\nexport interface GuestAwareObjectType<T> {\n  value: GuestAwareExecutorType<T>;\n}\n\nexport type GuestAwareType<T = any> =\n  | GuestAwareExecutorType<T>\n  | GuestAwareObjectType<T>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/give\n */\nexport function value<T>(guestAware: GuestAwareType<T>, guest: GuestType<T>) {\n  if (guestAware === undefined) {\n    throw new Error(\"value didnt receive guestAware argument\");\n  }\n  if (guest === undefined) {\n    throw new Error(\"value didnt receive guest argument\");\n  }\n  if (typeof guestAware === \"function\") {\n    return guestAware(guest);\n  } else {\n    return guestAware.value(guest);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-guest-aware\n */\nexport function isGuestAware(\n  mbGuestAware: any,\n): mbGuestAware is GuestAwareType {\n  if (mbGuestAware === undefined) {\n    throw new Error(\"isGuestAware didnt receive mbGuestAware argument\");\n  }\n  return (\n    typeof mbGuestAware === \"function\" ||\n    typeof mbGuestAware?.value === \"function\"\n  );\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware\n */\nexport class GuestAware<T = any> implements GuestAwareObjectType<T> {\n  public constructor(private guestAware: GuestAwareType<T>) {\n    if (guestAware === undefined) {\n      throw new Error(\"GuestAware constructor didnt receive executor function\");\n    }\n  }\n\n  public value(guest: GuestType<T>): GuestType<T> {\n    value(this.guestAware, guest);\n    return guest;\n  }\n}\n","type GuestIntroduction = \"guest\" | \"patron\";\n\nexport interface GiveOptions {\n  data?: unknown;\n}\n\nexport type GuestExecutorType<T = any> = (\n  value: T,\n  options?: GiveOptions,\n) => void;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T, options?: GiveOptions): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/give\n */\nexport function give<T>(data: T, guest: GuestType<T>, options?: GiveOptions) {\n  if (data === undefined) {\n    throw new Error(\"give didnt receive data argument\");\n  }\n  if (guest === undefined) {\n    throw new Error(\"give didnt receive guest argument\");\n  }\n  if (typeof guest === \"function\") {\n    guest(data, options);\n  } else {\n    guest.give(data, options);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-guest\n */\nexport function isGuest(mbGuest: any): mbGuest is GuestType {\n  if (mbGuest === undefined) {\n    throw new Error(\"isGuest didnt receive mbGuest argument\");\n  }\n  return typeof mbGuest === \"function\" || typeof mbGuest?.give === \"function\";\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest\n */\nexport class Guest<T> implements GuestObjectType<T> {\n  public constructor(private receiver: GuestExecutorType<T>) {\n    if (!receiver) {\n      throw new Error(\"reseiver function was not passed to Guest constructor\");\n    }\n  }\n\n  public give(value: T, options?: GiveOptions) {\n    this.receiver(value, options);\n    return this;\n  }\n}\n","import { PoolType } from \"./PatronPool\";\nimport { give, GuestType, GiveOptions, GuestObjectType } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\nexport type PoolAwareOptions = {\n  pool?: PoolType;\n  castedGuest?: GuestObjectType;\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-once\n */\nexport class PatronOnce<T> implements GuestDisposableType<T> {\n  private received = false;\n\n  public constructor(private baseGuest: GuestType<T>) {\n    if (baseGuest === undefined) {\n      throw new Error(\"PatronOnce didnt receive baseGuest argument\");\n    }\n  }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    if (!this.received) {\n      this.received = true;\n      give(value, this.baseGuest, options);\n    }\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    if (this.received) {\n      return true;\n    }\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { GuestDisposableType, MaybeDisposableType } from \"./GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"./Guest\";\nimport { PoolAwareOptions } from \"../Patron/PatronOnce\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-cast\n */\nexport class GuestCast<T> implements GuestDisposableType<T> {\n  public constructor(\n    private sourceGuest: GuestType<any>,\n    private targetGuest: GuestType<T>,\n  ) {\n    if (sourceGuest === undefined) {\n      throw new Error(\"GuestCast didnt receive sourceGuest argument\");\n    }\n    if (targetGuest === undefined) {\n      throw new Error(\"GuestCast didnt receive targetGuest argument\");\n    }\n  }\n\n  public introduction() {\n    if (typeof this.sourceGuest === \"function\") {\n      return \"guest\";\n    }\n    if (!this.sourceGuest.introduction) {\n      return \"guest\";\n    }\n    return this.sourceGuest.introduction();\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.targetGuest, {\n      ...options,\n      data: {\n        ...(options?.data ?? {}),\n        castedGuest: (options?.data as PoolAwareOptions)?.castedGuest ?? this,\n      },\n    });\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.sourceGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"../Guest/Guest\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"removePatronFromPools didnt receive patron argument\");\n  }\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  if (patron === undefined) {\n    throw new Error(\"isPatronInPools didnt receive patron argument\");\n  }\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T, options?: GiveOptions) => this;\n\n  public constructor(private initiator: unknown) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    let lastMicrotask: (() => void) | null = null;\n    const doReceive = (value: T, options?: GiveOptions) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target, options);\n      });\n    };\n    this.give = (value: T, options?: GiveOptions) => {\n      const currentMicroTask = () => {\n        if (currentMicroTask === lastMicrotask) {\n          doReceive(value, options);\n        }\n      };\n      lastMicrotask = currentMicroTask;\n      queueMicrotask(currentMicroTask);\n      return this;\n    };\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron, {});\n    return this;\n  }\n\n  private sendValueToGuest(\n    value: T,\n    guest: GuestType<T>,\n    options?: GiveOptions,\n  ) {\n    const isDisposed = this.guestDisposed(value, guest);\n\n    if (!isDisposed) {\n      give(value, guest, {\n        ...options,\n        data: {\n          ...((options?.data as Record<string, unknown>) ?? {}),\n          initiator: this.initiator,\n          pool: this,\n        },\n      });\n    }\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestAwareObjectType } from \"../Guest/GuestAware\";\nimport { PatronPool } from \"../Patron/PatronPool\";\n\nexport interface PoolAware<T = any> {\n  pool(): PatronPool<T>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source\n */\nexport type SourceType<T = any> = GuestAwareObjectType<T> &\n  GuestObjectType<T> &\n  PoolAware<T>;\n\nexport class Source<T> implements SourceType<T> {\n  private thePool = new PatronPool(this);\n\n  public constructor(private sourceDocument: T) {\n    if (sourceDocument === undefined) {\n      throw new Error(\"Source didnt receive sourceDocument argument\");\n    }\n  }\n\n  public pool() {\n    return this.thePool;\n  }\n\n  public give(value: T): this {\n    this.sourceDocument = value;\n    this.thePool.give(this.sourceDocument);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    if (typeof guest === \"function\") {\n      this.thePool.distribute(this.sourceDocument, new Guest(guest));\n    } else {\n      this.thePool.distribute(this.sourceDocument, guest);\n    }\n    return this;\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { give, GuestType } from \"./../Guest/Guest\";\nimport { Source, SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source/source-empty\n */\nexport class SourceEmpty<T> implements SourceType<T> {\n  private baseSource = new Source<T | null>(null);\n\n  public value(guest: GuestType<T>) {\n    this.baseSource.value(\n      new GuestCast(guest as GuestType, (value, options) => {\n        if (value !== null) {\n          give(value, guest, options);\n        }\n      }),\n    );\n    return this;\n  }\n\n  public give(value: T): this {\n    this.baseSource.give(value);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    return this.baseSource.pool();\n  }\n}\n","import { GuestDisposableType, MaybeDisposableType } from \"./GuestDisposable\";\nimport { GiveOptions, Guest, GuestType } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-object\n */\nexport class GuestObject<T> implements GuestDisposableType<T> {\n  public constructor(private baseGuest: GuestType<T>) {\n    if (baseGuest === undefined) {\n      throw new Error(\"GuestObject didnt receive baseGuest argument\");\n    }\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    let guest = this.baseGuest;\n    if (typeof guest === \"function\") {\n      guest = new Guest(guest);\n    }\n    guest.give(value, options);\n    return this;\n  }\n\n  public introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n    return this.baseGuest.introduction();\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { PoolType } from \"../Patron/PatronPool\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-pool\n */\nexport class GuestPool<T> implements GuestObjectType<T>, PoolType<T> {\n  private guests = new Set<GuestType<T>>();\n\n  private patronPool: PatronPool<T>;\n\n  public constructor(initiator: unknown) {\n    this.patronPool = new PatronPool(initiator);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    this.deliverToGuests(value, options);\n    this.patronPool.give(value, options);\n    return this;\n  }\n\n  public add(guest: GuestType<T>): this {\n    if (\n      typeof guest === \"function\" ||\n      !guest.introduction ||\n      guest.introduction() === \"guest\"\n    ) {\n      this.guests.add(guest);\n    }\n    this.patronPool.add(guest);\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>): this {\n    this.guests.delete(patron);\n    this.patronPool.remove(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestObjectType<T>): this {\n    this.add(possiblePatron);\n    this.give(receiving);\n    return this;\n  }\n\n  public size() {\n    return this.patronPool.size() + this.guests.size;\n  }\n\n  private deliverToGuests(value: T, options?: GiveOptions) {\n    this.guests.forEach((target) => {\n      give(value, target, options);\n    });\n    this.guests.clear();\n  }\n}\n","import { GuestAwareObjectType } from \"./GuestAware\";\nimport { Source } from \"../Source/Source\";\nimport { Guest, GuestObjectType, GuestType } from \"./Guest\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestObject } from \"./GuestObject\";\nimport { GuestPool } from \"./GuestPool\";\n\nexport interface GuestAwareAllType<T = any> extends GuestAwareObjectType<T> {\n  valueArray(guest: GuestObjectType<T>): this;\n  guestKey<R>(key: string): GuestObjectType<R>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-all\n */\nexport class GuestAwareAll<T> implements GuestAwareAllType<T> {\n  private theAll: Source<Record<string, unknown>>;\n\n  private keysKnown = new Set();\n\n  private keysFilled = new Set();\n\n  private filledAllPool = new GuestPool(this);\n\n  public constructor() {\n    this.theAll = new Source<Record<string, unknown>>({});\n  }\n\n  public valueArray(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    this.filledAllPool.add(\n      new GuestCast(guestObject, (value: Record<string, unknown>) => {\n        guestObject.give(Object.values(value) as T);\n      }),\n    );\n    if (this.isAllFilled()) {\n      this.theAll.value(\n        new Guest((all: Record<string, unknown>) => {\n          this.filledAllPool.give(Object.values(all));\n        }),\n      );\n    }\n    return this;\n  }\n\n  public value(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    if (this.isAllFilled()) {\n      this.filledAllPool.add(guestObject);\n      this.theAll.value(\n        new Guest((all) => {\n          this.filledAllPool.give(all);\n        }),\n      );\n    } else {\n      this.filledAllPool.add(guestObject);\n    }\n    return this;\n  }\n\n  public guestKey<R>(key: string): GuestObjectType<R> {\n    this.keysKnown.add(key);\n    return new Guest((value) => {\n      // Обернул в очередь чтобы можно было синхронно наполнить очередь известных ключей\n      queueMicrotask(() => {\n        this.theAll.value(\n          new Guest((all: Record<string, unknown>) => {\n            this.keysFilled.add(key);\n            const lastAll = {\n              ...all,\n              [key]: value,\n            };\n            this.theAll.give(lastAll);\n            if (this.isAllFilled()) {\n              this.filledAllPool.give(lastAll);\n            }\n          }),\n        );\n      });\n    });\n  }\n\n  private isAllFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { PatronOnce } from \"../Patron/PatronOnce\";\nimport { PrivateType } from \"../Private/Private\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\nimport { give, GuestType } from \"./Guest\";\nimport {\n  GuestAwareObjectType,\n  GuestAwareType,\n  isGuestAware,\n  value,\n} from \"./GuestAware\";\nimport { GuestAwareAll } from \"./GuestAwareAll\";\nimport { GuestCast } from \"./GuestCast\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-sequence\n */\nexport class GuestAwareSequence<T, TG> implements GuestAwareObjectType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSource: PrivateType<GuestAwareType<TG>>,\n  ) {\n    if (baseSource === undefined) {\n      throw new Error(\"GuestAwareSequence didnt receive baseSource argument\");\n    }\n    if (targetSource === undefined) {\n      throw new Error(\"GuestAwareSequence didnt receive targetSource argument\");\n    }\n  }\n\n  public value(guest: GuestType<TG[]>) {\n    const all = new GuestAwareAll<TG[]>();\n    const sequenceSource = new SourceEmpty();\n    const targetSource = this.targetSource.get(sequenceSource);\n\n    value(\n      this.baseSource,\n      new GuestCast(guest, (theValue) => {\n        let index = 0;\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          } else {\n            all.valueArray(guest);\n          }\n        };\n\n        function handle() {\n          sequenceSource.give(null);\n          const nextValue = theValue[index];\n          if (isGuestAware(nextValue)) {\n            value(\n              nextValue,\n              new PatronOnce((theNextValue) => {\n                sequenceSource.give(theNextValue);\n                value(targetSource, all.guestKey(index.toString()));\n                nextItemHandle();\n              }),\n            );\n          } else {\n            sequenceSource.give(nextValue);\n            value(targetSource, all.guestKey(index.toString()));\n            nextItemHandle();\n          }\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n        } else {\n          give([], guest);\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { PrivateType } from \"../Private/Private\";\nimport { give, GuestType } from \"./Guest\";\nimport {\n  GuestAware,\n  GuestAwareObjectType,\n  GuestAwareType,\n  isGuestAware,\n  value,\n} from \"./GuestAware\";\nimport { GuestAwareAll } from \"./GuestAwareAll\";\nimport { GuestCast } from \"./GuestCast\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-map\n */\nexport class GuestAwareMap<T, TG> implements GuestAwareObjectType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSource: PrivateType<GuestAwareType<TG>>,\n  ) {\n    if (baseSource === undefined) {\n      throw new Error(\"GuestAwareMap didnt receive baseSource argument\");\n    }\n    if (targetSource === undefined) {\n      throw new Error(\"GuestAwareMap didnt receive targetSource argument\");\n    }\n  }\n\n  public value(guest: GuestType<TG[]>) {\n    const all = new GuestAwareAll();\n    value(\n      this.baseSource,\n      new GuestCast(<GuestType>guest, (theValue) => {\n        theValue.forEach((val, index) => {\n          const valueSource = isGuestAware(val)\n            ? val\n            : new GuestAware((innerGuest) => {\n                give(val, innerGuest);\n              });\n          const targetSource = this.targetSource.get(valueSource);\n          value(targetSource, all.guestKey(index.toString()));\n        });\n      }),\n    );\n    all.valueArray(<GuestType>guest);\n    return this;\n  }\n}\n","import { give, GuestType } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, value } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-race\n */\nexport class GuestAwareRace<T> implements GuestAwareObjectType<T> {\n  public constructor(private guestAwares: GuestAwareType<T>[]) {\n    if (guestAwares === undefined) {\n      throw new Error(\"GuestAwareRace didnt receive guestAwares argument\");\n    }\n  }\n\n  public value(guest: GuestType<T>): this {\n    let connectedWithGuestAware: GuestAwareType | null = null;\n    this.guestAwares.forEach((guestAware) => {\n      value(\n        guestAware,\n        new GuestCast(<GuestType>guest, (value) => {\n          if (\n            !connectedWithGuestAware ||\n            connectedWithGuestAware === guestAware\n          ) {\n            give(value as T, guest);\n            connectedWithGuestAware = guestAware;\n          }\n        }),\n      );\n    });\n    return this;\n  }\n}\n","import { SourceType } from \"../Source/Source\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\nimport { GuestType } from \"./Guest\";\nimport { GuestAwareObjectType } from \"./GuestAware\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/action-type\n */\nexport interface ActionType<P = any> {\n  do(config: P): this;\n}\n\nexport interface GuestAwareAcitveType<R = unknown, T = unknown>\n  extends GuestAwareObjectType<T>,\n    ActionType<R> {}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-active\n */\nexport class GuestAwareActive<R, T> implements GuestAwareAcitveType<R, T> {\n  private source = new SourceEmpty<T>();\n\n  public constructor(\n    private configExecutor: (config: R, source: SourceType<T>) => void,\n  ) {\n    if (configExecutor === undefined) {\n      throw new Error(\n        \"GuestAwareActive constructor didnt receive executor function\",\n      );\n    }\n  }\n\n  public do(config: R): this {\n    this.configExecutor(config, this.source);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    this.source.value(guest);\n    return this;\n  }\n}\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-sync\n */\nexport class GuestSync<T> implements GuestValueType<T> {\n  public constructor(private theValue: T) {\n    if (theValue === undefined) {\n      throw new Error(\"GuestSync didnt receive theValue argument\");\n    }\n  }\n\n  public give(value: T): this {\n    this.theValue = value;\n    return this;\n  }\n\n  public value() {\n    return this.theValue;\n  }\n}\n","import { give, GiveOptions, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-disposable\n */\nexport class GuestDisposable<T> implements GuestDisposableType<T> {\n  public constructor(\n    private guest: GuestType,\n    private disposeCheck: (value: T | null) => boolean,\n  ) {\n    if (guest === undefined) {\n      throw new Error(\"GuestDisposable didnt receive guest argument\");\n    }\n    if (disposeCheck === undefined) {\n      throw new Error(\"GuestDisposable didnt receive disposeCheck argument\");\n    }\n  }\n\n  public disposed(value: T | null): boolean {\n    return this.disposeCheck(value);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.guest, options);\n    return this;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"../Guest/Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron\n */\nexport class Patron<T> implements GuestDisposableType<T> {\n  public constructor(private willBePatron: GuestType<T>) {\n    if (willBePatron === undefined) {\n      throw new Error(\"Patron didnt receive willBePatron argument\");\n    }\n  }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.willBePatron, options);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.willBePatron as GuestDisposableType;\n    return maybeDisposable?.disposed?.(value) || false;\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestAwareType, value } from \"../Guest/GuestAware\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport { SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source-dynamic\n */\nexport class SourceDynamic<T = unknown> implements SourceType<T> {\n  public constructor(\n    private baseGuest: GuestType<T>,\n    private baseGuestAware: GuestAwareType<T>,\n  ) {\n    if (baseGuest === undefined) {\n      throw new Error(\"SourceDynamic didnt receive baseGuest argument\");\n    }\n    if (baseGuestAware === undefined) {\n      throw new Error(\"SourceDynamic didnt receive baseGuestAware argument\");\n    }\n  }\n\n  public value(guest: GuestType<T>) {\n    value(this.baseGuestAware, guest);\n    return this;\n  }\n\n  public give(value: T) {\n    give(value, this.baseGuest);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    throw Error(\"No pool in SourceDynamic\");\n  }\n}\n","import { PrivateType } from \"./Private\";\n\ninterface Constructable<T> {\n  new (...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport class PrivateClass<T> implements PrivateType<T> {\n  public constructor(\n    private constructorFn: Prototyped<T>,\n    private modules: Record<string, unknown> = {},\n  ) {\n    if (constructorFn === undefined) {\n      throw new Error(\"PrivateClass didnt receive constructorFn argument\");\n    }\n  }\n\n  public get<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return new (this.constructorFn as Constructable<T>)(\n      ...args,\n      this.modules,\n    ) as CT extends null ? T : CT;\n  }\n}\n","/**\n * @url https://kosukhin.github.io/patron.site/#/utils/private\n */\nexport interface PrivateType<T> {\n  get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\nexport class Private<T> implements PrivateType<T> {\n  public constructor(private buildingFn: (...args: any[]) => T) {\n    if (buildingFn === undefined) {\n      throw new Error(\"Private didnt receive buildingFn argument\");\n    }\n  }\n\n  public get<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return this.buildingFn(...args) as CT extends null ? T : CT;\n  }\n}\n"],"names":["value","guestAware","guest","Error","isGuestAware","mbGuestAware","GuestAware","constructor","this","give","data","options","isGuest","mbGuest","Guest","receiver","PatronOnce","baseGuest","__publicField","introduction","received","disposed","maybeDisposable","GuestCast","sourceGuest","targetGuest","castedGuest","poolSets","Map","removePatronFromPools","patron","forEach","pool","delete","isPatronInPools","inPool","has","PatronPool","initiator","patrons","Set","set","lastMicrotask","doReceive","target","sendValueToGuest","currentMicroTask","queueMicrotask","size","add","shouldBePatron","remove","distribute","receiving","possiblePatron","guestDisposed","Source","sourceDocument","thePool","SourceEmpty","baseSource","GuestObject","GuestPool","patronPool","deliverToGuests","guests","clear","GuestAwareAll","theAll","valueArray","guestObject","filledAllPool","Object","values","isAllFilled","all","guestKey","key","keysKnown","keysFilled","lastAll","GuestAwareSequence","targetSource","sequenceSource","get","theValue","index","nextItemHandle","handle","nextValue","theNextValue","toString","GuestAwareMap","val","valueSource","innerGuest","GuestAwareRace","guestAwares","connectedWithGuestAware","GuestAwareActive","configExecutor","config","source","GuestSync","GuestDisposable","disposeCheck","Patron","willBePatron","SourceDynamic","baseGuestAware","PrivateClass","constructorFn","modules","args","Private","buildingFn"],"mappings":"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"}