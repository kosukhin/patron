{"version":3,"file":"patron.min.mjs","sources":["../src/Guest/GuestAware.ts","../src/Guest/Guest.ts","../src/Patron/PatronOnce.ts","../src/Guest/GuestCast.ts","../src/Patron/PatronPool.ts","../src/Source/Source.ts","../src/Source/SourceEmpty.ts","../src/Guest/GuestObject.ts","../src/Guest/GuestPool.ts","../src/Guest/GuestAwareAll.ts","../src/Guest/GuestAwareSequence.ts","../src/Guest/GuestAwareMap.ts","../src/Guest/GuestAwareRace.ts","../src/Guest/GuestAwareActive.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Patron/Patron.ts","../src/Source/SourceDynamic.ts","../src/Private/PrivateClass.ts","../src/Private/Private.ts"],"sourcesContent":["import { GuestType } from \"./Guest\";\n\nexport type GuestAwareExecutorType<T> = (guest: GuestType<T>) => unknown;\n\nexport interface GuestAwareObjectType<T> {\n  value: GuestAwareExecutorType<T>\n}\n\nexport type GuestAwareType<T = any> = GuestAwareExecutorType<T> | GuestAwareObjectType<T>\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/give\n */\nexport function value<T>(guestAware: GuestAwareType<T>, guest: GuestType<T>) {\n  if (typeof guestAware === 'function') {\n    return guestAware(guest);\n  } else {\n    return guestAware.value(guest);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-guest-aware\n */\nexport function isGuestAware(mbGuestAware: any): mbGuestAware is GuestAwareType {\n  return typeof mbGuestAware === 'function' || typeof mbGuestAware?.value === 'function';\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware\n */\nexport class GuestAware<T = any> implements GuestAwareObjectType<T> {\n  public constructor(private guestAware: GuestAwareType<T>) { }\n\n  public value(guest: GuestType<T>): GuestType<T> {\n    value(this.guestAware, guest);\n    return guest;\n  }\n}\n","type GuestIntroduction = \"guest\" | \"patron\";\n\nexport interface GiveOptions {\n  data?: unknown;\n}\n\nexport type GuestExecutorType<T = any> = (\n  value: T,\n  options?: GiveOptions,\n) => void;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T, options?: GiveOptions): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/give\n */\nexport function give<T>(data: T, guest: GuestType<T>, options?: GiveOptions) {\n  if (typeof guest === \"function\") {\n    guest(data, options);\n  } else {\n    guest.give(data, options);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-guest\n */\nexport function isGuest(mbGuest: any): mbGuest is GuestType {\n  return typeof mbGuest === 'function' || typeof mbGuest?.give === 'function';\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest\n */\nexport class Guest<T> implements GuestObjectType<T> {\n  public constructor(private receiver: GuestExecutorType<T>) { }\n\n  public give(value: T, options?: GiveOptions) {\n    this.receiver(value, options);\n    return this;\n  }\n}\n","import { PoolType } from \"./PatronPool\";\nimport { give, GuestType, GiveOptions, GuestObjectType } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\nexport type PoolAwareOptions = {\n  pool?: PoolType;\n  castedGuest?: GuestObjectType;\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-once\n */\nexport class PatronOnce<T> implements GuestDisposableType<T> {\n  private received = false;\n\n  public constructor(private baseGuest: GuestType<T>) { }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    if (!this.received) {\n      this.received = true;\n      give(value, this.baseGuest, options);\n    }\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    if (this.received) {\n      return true;\n    }\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"./GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"./Guest\";\nimport { PoolAwareOptions } from \"../Patron/PatronOnce\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-cast\n */\nexport class GuestCast<T> implements GuestDisposableType<T> {\n  public constructor(\n    private sourceGuest: GuestType<any>,\n    private targetGuest: GuestType<T>,\n  ) { }\n\n  public introduction() {\n    if (typeof this.sourceGuest === \"function\") {\n      return \"guest\";\n    }\n    if (!this.sourceGuest.introduction) {\n      return \"guest\";\n    }\n    return this.sourceGuest.introduction();\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.targetGuest, {\n      ...options,\n      data: {\n        ...(options?.data ?? {}),\n        castedGuest: (options?.data as PoolAwareOptions)?.castedGuest ?? this,\n      }\n    });\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.sourceGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"../Guest/Guest\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T, options?: GiveOptions) => this;\n\n  public constructor(private initiator: unknown) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    let lastMicrotask: (() => void) | null = null;\n    const doReceive = (value: T, options?: GiveOptions) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target, options);\n      });\n    };\n    this.give = (value: T, options?: GiveOptions) => {\n      const currentMicroTask = () => {\n        if (currentMicroTask === lastMicrotask) {\n          doReceive(value, options);\n        }\n      };\n      lastMicrotask = currentMicroTask;\n      queueMicrotask(currentMicroTask);\n      return this;\n    };\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron, {});\n    return this;\n  }\n\n  private sendValueToGuest(\n    value: T,\n    guest: GuestType<T>,\n    options?: GiveOptions,\n  ) {\n    const isDisposed = this.guestDisposed(value, guest);\n\n    if (!isDisposed) {\n      give(value, guest, {\n        ...options,\n        data: {\n          ...((options?.data as Record<string, unknown>) ?? {}),\n          initiator: this.initiator,\n          pool: this,\n        },\n      });\n    }\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestAwareObjectType } from \"../Guest/GuestAware\";\nimport { PatronPool } from \"../Patron/PatronPool\";\n\nexport interface PoolAware<T = any> {\n  pool(): PatronPool<T>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source\n */\nexport type SourceType<T = any> = GuestAwareObjectType<T> &\n  GuestObjectType<T> &\n  PoolAware<T>;\n\nexport class Source<T> implements SourceType<T> {\n  private thePool = new PatronPool(this);\n\n  public constructor(private sourceDocument: T) { }\n\n  public pool() {\n    return this.thePool;\n  }\n\n  public give(value: T): this {\n    this.sourceDocument = value;\n    this.thePool.give(this.sourceDocument);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    if (typeof guest === \"function\") {\n      this.thePool.distribute(this.sourceDocument, new Guest(guest));\n    } else {\n      this.thePool.distribute(this.sourceDocument, guest);\n    }\n    return this;\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { give, GuestType } from \"./../Guest/Guest\";\nimport { Source, SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source/source-empty\n */\nexport class SourceEmpty<T> implements SourceType<T> {\n  private baseSource = new Source<T | null>(null);\n\n  public value(guest: GuestType<T>) {\n    this.baseSource.value(\n      new GuestCast(guest as GuestType, (value, options) => {\n        if (value !== null) {\n          give(value, guest, options);\n        }\n      }),\n    );\n    return this;\n  }\n\n  public give(value: T): this {\n    this.baseSource.give(value);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    return this.baseSource.pool();\n  }\n}\n","import {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"./GuestDisposable\";\nimport { GiveOptions, Guest, GuestType } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-object\n */\nexport class GuestObject<T> implements GuestDisposableType<T> {\n  public constructor(private baseGuest: GuestType<T>) { }\n\n  public give(value: T, options?: GiveOptions): this {\n    let guest = this.baseGuest;\n    if (typeof guest === \"function\") {\n      guest = new Guest(guest);\n    }\n    guest.give(value, options);\n    return this;\n  }\n\n  public introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n    return this.baseGuest.introduction();\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { PoolType } from \"../Patron/PatronPool\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-pool\n */\nexport class GuestPool<T> implements GuestObjectType<T>, PoolType<T> {\n  private guests = new Set<GuestType<T>>();\n\n  private patronPool: PatronPool<T>;\n\n  public constructor(initiator: unknown) {\n    this.patronPool = new PatronPool(initiator);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    this.deliverToGuests(value, options);\n    this.patronPool.give(value, options);\n    return this;\n  }\n\n  public add(guest: GuestType<T>): this {\n    if (\n      typeof guest === \"function\" ||\n      !guest.introduction ||\n      guest.introduction() === \"guest\"\n    ) {\n      this.guests.add(guest);\n    }\n    this.patronPool.add(guest);\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>): this {\n    this.guests.delete(patron);\n    this.patronPool.remove(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestObjectType<T>): this {\n    this.add(possiblePatron);\n    this.give(receiving);\n    return this;\n  }\n\n  public size() {\n    return this.patronPool.size() + this.guests.size;\n  }\n\n  private deliverToGuests(value: T, options?: GiveOptions) {\n    this.guests.forEach((target) => {\n      give(value, target, options);\n    });\n    this.guests.clear();\n  }\n}\n","import { GuestAwareObjectType } from \"./GuestAware\";\nimport { Source } from \"../Source/Source\";\nimport { Guest, GuestObjectType, GuestType } from \"./Guest\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestObject } from \"./GuestObject\";\nimport { GuestPool } from \"./GuestPool\";\n\nexport interface GuestAwareAllType<T = any> extends GuestAwareObjectType<T> {\n  valueArray(guest: GuestObjectType<T>): this;\n  guestKey<R>(key: string): GuestObjectType<R>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-all\n */\nexport class GuestAwareAll<T> implements GuestAwareAllType<T> {\n  private theAll: Source<Record<string, unknown>>;\n\n  private keysKnown = new Set();\n\n  private keysFilled = new Set();\n\n  private filledAllPool = new GuestPool(this);\n\n  public constructor() {\n    this.theAll = new Source<Record<string, unknown>>({});\n  }\n\n  public valueArray(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    this.filledAllPool.add(\n      new GuestCast(guestObject, (value: Record<string, unknown>) => {\n        guestObject.give(Object.values(value) as T);\n      }),\n    );\n    if (this.isAllFilled()) {\n      this.theAll.value(\n        new Guest((all: Record<string, unknown>) => {\n          this.filledAllPool.give(Object.values(all));\n        }),\n      );\n    }\n    return this;\n  }\n\n  public value(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    if (this.isAllFilled()) {\n      this.filledAllPool.add(guestObject);\n      this.theAll.value(\n        new Guest((all) => {\n          this.filledAllPool.give(all);\n        }),\n      );\n    } else {\n      this.filledAllPool.add(guestObject);\n    }\n    return this;\n  }\n\n  public guestKey<R>(key: string): GuestObjectType<R> {\n    this.keysKnown.add(key);\n    return new Guest((value) => {\n      // Обернул в очередь чтобы можно было синхронно наполнить очередь известных ключей\n      queueMicrotask(() => {\n        this.theAll.value(\n          new Guest((all: Record<string, unknown>) => {\n            this.keysFilled.add(key);\n            const lastAll = {\n              ...all,\n              [key]: value,\n            };\n            this.theAll.give(lastAll);\n            if (this.isAllFilled()) {\n              this.filledAllPool.give(lastAll);\n            }\n          }),\n        );\n      });\n    });\n  }\n\n  private isAllFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { PatronOnce } from \"../Patron/PatronOnce\";\nimport { PrivateType } from \"../Private/Private\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\nimport { give, GuestType } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, isGuestAware, value } from \"./GuestAware\";\nimport { GuestAwareAll } from \"./GuestAwareAll\";\nimport { GuestCast } from \"./GuestCast\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-sequence\n */\nexport class GuestAwareSequence<T, TG> implements GuestAwareObjectType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSource: PrivateType<GuestAwareType<TG>>\n  ) { }\n\n  public value(guest: GuestType<TG[]>) {\n    const all = new GuestAwareAll<TG[]>();\n    const sequenceSource = new SourceEmpty();\n    const targetSource = this.targetSource.get(\n      sequenceSource\n    )\n\n    value(\n      this.baseSource,\n      new GuestCast(guest, (theValue) => {\n        let index = 0;\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          } else {\n            all.valueArray(guest);\n          }\n        }\n\n        function handle() {\n          sequenceSource.give(null);\n          const nextValue = theValue[index];\n          if (isGuestAware(nextValue)) {\n            value(nextValue, new PatronOnce((theNextValue) => {\n              sequenceSource.give(theNextValue);\n              value(targetSource, all.guestKey(index.toString()));\n              nextItemHandle();\n            }));\n          } else {\n            sequenceSource.give(nextValue);\n            value(targetSource, all.guestKey(index.toString()));\n            nextItemHandle();\n          }\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n        } else {\n          give([], guest);\n        }\n      })\n    );\n    return this;\n  }\n}\n","import { PrivateType } from \"../Private/Private\";\nimport { give, GuestType } from \"./Guest\";\nimport { GuestAware, GuestAwareObjectType, GuestAwareType, isGuestAware, value } from \"./GuestAware\";\nimport { GuestAwareAll } from \"./GuestAwareAll\";\nimport { GuestCast } from \"./GuestCast\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-map\n */\nexport class GuestAwareMap<T, TG> implements GuestAwareObjectType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSource: PrivateType<GuestAwareType<TG>>\n  ) { }\n\n  public value(guest: GuestType<TG[]>) {\n    const all = new GuestAwareAll();\n    value(\n      this.baseSource,\n      new GuestCast(<GuestType>guest, (theValue) => {\n        theValue.forEach((val, index) => {\n          const valueSource = isGuestAware(val)\n            ? val\n            : new GuestAware((innerGuest) => {\n              give(val, innerGuest);\n            });\n          const targetSource = this.targetSource.get(valueSource)\n          value(targetSource, all.guestKey(index.toString()));\n        });\n      })\n    )\n    all.valueArray(<GuestType>guest);\n    return this;\n  }\n}\n","import { give, GuestType } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, value } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-race\n */\nexport class GuestAwareRace<T> implements GuestAwareObjectType<T> {\n  public constructor(private guestAwares: GuestAwareType<T>[]) { }\n\n  public value(guest: GuestType<T>): this {\n    let connectedWithGuestAware: GuestAwareType | null = null;\n    this.guestAwares.forEach(guestAware => {\n      value(\n        guestAware,\n        new GuestCast(<GuestType>guest, (value) => {\n          if (!connectedWithGuestAware || connectedWithGuestAware === guestAware) {\n            give(value as T, guest);\n            connectedWithGuestAware = guestAware\n          }\n        })\n      );\n    });\n    return this;\n  }\n}\n","import { SourceType } from \"../Source/Source\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\nimport { GuestType } from \"./Guest\";\nimport { GuestAwareObjectType } from \"./GuestAware\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/action-type\n */\nexport interface ActionType<P = any> {\n  do(config: P): this;\n}\n\nexport interface GuestAwareAcitveType<R = unknown, T = unknown> extends GuestAwareObjectType<T>, ActionType<R> {\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-active\n */\nexport class GuestAwareActive<R, T> implements GuestAwareAcitveType<R, T> {\n  private source = new SourceEmpty<T>();\n\n  public constructor(private configExecutor: (config: R, source: SourceType<T>) => void) { }\n\n  public do(config: R): this {\n    this.configExecutor(config, this.source);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    this.source.value(guest);\n    return this;\n  }\n}\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-sync\n */\nexport class GuestSync<T> implements GuestValueType<T> {\n  public constructor(private theValue: T) { }\n\n  public give(value: T): this {\n    this.theValue = value;\n    return this;\n  }\n\n  public value() {\n    return this.theValue;\n  }\n}\n","import { give, GiveOptions, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-disposable\n */\nexport class GuestDisposable<T> implements GuestDisposableType<T> {\n  public constructor(\n    private guest: GuestType,\n    private disposeCheck: (value: T | null) => boolean,\n  ) { }\n\n  public disposed(value: T | null): boolean {\n    return this.disposeCheck(value);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.guest, options);\n    return this;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"../Guest/Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron\n */\nexport class Patron<T> implements GuestDisposableType<T> {\n  public constructor(private willBePatron: GuestType<T>) { }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.willBePatron, options);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.willBePatron as GuestDisposableType;\n    return maybeDisposable?.disposed?.(value) || false;\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestAwareType, value } from \"../Guest/GuestAware\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport { SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source-dynamic\n */\nexport class SourceDynamic<T = unknown> implements SourceType<T> {\n  public constructor(\n    private baseGuest: GuestType<T>,\n    private baseGuestAware: GuestAwareType<T>,\n  ) { }\n\n  public value(guest: GuestType<T>) {\n    value(this.baseGuestAware, guest);\n    return this;\n  }\n\n  public give(value: T) {\n    give(value, this.baseGuest);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    throw Error('No pool in SourceDynamic');\n  }\n}\n","import { PrivateType } from \"./Private\";\n\ninterface Constructable<T> {\n  new(...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport class PrivateClass<T> implements PrivateType<T> {\n  public constructor(\n    private constructorFn: Prototyped<T>,\n    private modules: Record<string, unknown> = {},\n  ) { }\n\n  public get<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return new (this.constructorFn as Constructable<T>)(\n      ...args,\n      this.modules,\n    ) as CT extends null ? T : CT;\n  }\n}\n","/**\n * @url https://kosukhin.github.io/patron.site/#/utils/private\n */\nexport interface PrivateType<T> {\n    get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\nexport class Private<T> implements PrivateType<T> {\n  public constructor(private buildingFn: (...args: any[]) => T) { }\n\n  public get<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n    return this.buildingFn(...args) as CT extends null ? T : CT;\n  }\n}\n"],"names":["value","guestAware","guest","isGuestAware","mbGuestAware","GuestAware","constructor","this","give","data","options","isGuest","mbGuest","Guest","receiver","PatronOnce","baseGuest","__publicField","introduction","received","disposed","maybeDisposable","GuestCast","sourceGuest","targetGuest","castedGuest","poolSets","Map","removePatronFromPools","patron","forEach","pool","delete","isPatronInPools","inPool","has","PatronPool","initiator","patrons","Set","set","lastMicrotask","doReceive","target","sendValueToGuest","currentMicroTask","queueMicrotask","size","add","shouldBePatron","Error","remove","distribute","receiving","possiblePatron","guestDisposed","Source","sourceDocument","thePool","SourceEmpty","baseSource","GuestObject","GuestPool","patronPool","deliverToGuests","guests","clear","GuestAwareAll","theAll","valueArray","guestObject","filledAllPool","Object","values","isAllFilled","all","guestKey","key","keysKnown","keysFilled","lastAll","GuestAwareSequence","targetSource","sequenceSource","get","theValue","index","nextItemHandle","handle","nextValue","theNextValue","toString","GuestAwareMap","val","valueSource","innerGuest","GuestAwareRace","guestAwares","connectedWithGuestAware","GuestAwareActive","configExecutor","config","source","GuestSync","GuestDisposable","disposeCheck","Patron","willBePatron","SourceDynamic","baseGuestAware","PrivateClass","constructorFn","modules","args","Private","buildingFn"],"mappings":"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"}