{"version":3,"file":"patron.min.mjs","sources":["../src/Guest/GuestAware.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Patron/PatronPool.ts","../src/Guest/GuestPool.ts","../src/Guest/GuestMiddle.ts","../src/Source/Source.ts","../src/Guest/GuestObject.ts","../src/Guest/GuestChain.ts","../src/Guest/GuestSync.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Source/SourceEmpty.ts","../src/Factory/Factory.ts"],"sourcesContent":["import { GuestType } from \"./Guest\";\n\nexport interface GuestAwareType<T = unknown> {\n  receiving(guest: GuestType<T>): unknown;\n}\n\nexport class GuestAware<T = unknown> implements GuestAwareType<T> {\n  public constructor(private guestReceiver: (guest: GuestType<T>) => void) {}\n\n  public receiving(guest: GuestType<T>): GuestType<T> {\n    this.guestReceiver(guest);\n    return guest;\n  }\n}\n","type GuestIntroduction = \"guest\" | \"patron\";\n\nexport interface ReceiveOptions {\n  data?: unknown;\n}\n\nexport type GuestExecutorType<T = unknown> = (\n  value: T,\n  options?: ReceiveOptions,\n) => void;\n\nexport interface GuestObjectType<T = unknown> {\n  receive(value: T, options?: ReceiveOptions): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = unknown> = GuestExecutorType<T> | GuestObjectType<T>;\n\nexport function give<T>(\n  data: T,\n  guest: GuestType<T>,\n  options?: ReceiveOptions,\n) {\n  if (typeof guest === \"function\") {\n    guest(data, options);\n  } else {\n    guest.receive(data, options);\n  }\n}\n\nexport class Guest<T> implements GuestObjectType<T> {\n  public constructor(private receiver: GuestExecutorType<T>) {}\n\n  public receive(value: T, options?: ReceiveOptions) {\n    this.receiver(value, options);\n    return this;\n  }\n}\n","import { give, GuestObjectType, GuestType, ReceiveOptions } from \"./Guest\";\n\nexport class GuestCast<T> implements GuestObjectType<T> {\n  public constructor(\n    private sourceGuest: GuestType<unknown>,\n    private targetGuest: GuestType<T>,\n  ) {}\n\n  introduction() {\n    if (typeof this.sourceGuest === \"function\") {\n      return \"guest\";\n    }\n\n    if (!this.sourceGuest.introduction) {\n      return \"guest\";\n    }\n    return this.sourceGuest.introduction();\n  }\n\n  receive(value: T, options?: ReceiveOptions): this {\n    give(value, this.targetGuest, options);\n    return this;\n  }\n}\n","import {\n  give,\n  GuestObjectType,\n  GuestType,\n  ReceiveOptions,\n} from \"../Guest/Guest\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\n\n/**\n * Удалить патрон из всех пулов\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\nexport interface PoolType<T = unknown> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n}\n\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons = new Set<GuestObjectType<T>>();\n\n  public receive: (value: T, options?: ReceiveOptions) => this;\n\n  public constructor(private initiator: unknown) {\n    poolSets.set(this, this.patrons);\n\n    let lastMicrotask: (() => void) | null = null;\n    const doReceive = (value: T, options?: ReceiveOptions) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target, options);\n      });\n    };\n    this.receive = (value: T, options?: ReceiveOptions) => {\n      const currentMicroTask = () => {\n        if (currentMicroTask === lastMicrotask) {\n          doReceive(value, options);\n        }\n      };\n      lastMicrotask = currentMicroTask;\n      queueMicrotask(currentMicroTask);\n      return this;\n    };\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron, {});\n    return this;\n  }\n\n  private sendValueToGuest(\n    value: T,\n    guest: GuestType<T>,\n    options?: ReceiveOptions,\n  ) {\n    give(value, guest, {\n      ...options,\n      data: {\n        ...((options?.data as Record<string, unknown>) ?? {}),\n        initiator: this.initiator,\n        pool: this,\n      },\n    });\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { PoolType } from \"../Patron/PatronPool\";\nimport { give, GuestObjectType, GuestType, ReceiveOptions } from \"./Guest\";\n\nexport class GuestPool<T> implements GuestObjectType<T>, PoolType<T> {\n  private guests = new Set<GuestType<T>>();\n\n  private patronPool: PatronPool<T>;\n\n  public constructor(initiator: unknown) {\n    this.patronPool = new PatronPool(initiator);\n  }\n\n  public receive(value: T, options?: ReceiveOptions): this {\n    this.deliverToGuests(value, options);\n    this.patronPool.receive(value, options);\n    return this;\n  }\n\n  public add(guest: GuestType<T>): this {\n    if (\n      typeof guest === \"function\" ||\n      !guest.introduction ||\n      guest.introduction() === \"guest\"\n    ) {\n      this.guests.add(guest);\n    }\n    this.patronPool.add(guest);\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>): this {\n    this.guests.delete(patron);\n    this.patronPool.remove(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestObjectType<T>): this {\n    this.add(possiblePatron);\n    this.receive(receiving);\n    return this;\n  }\n\n  private deliverToGuests(value: T, options?: ReceiveOptions) {\n    this.guests.forEach((target) => {\n      give(value, target, options);\n    });\n    this.guests.clear();\n  }\n}\n","import { GuestObjectType, GuestType, ReceiveOptions } from \"./Guest\";\n\nexport class GuestMiddle<T> implements GuestObjectType<T> {\n  public constructor(\n    private baseGuest: GuestType<unknown>,\n    private middleFn: (value: T, options?: ReceiveOptions) => void,\n  ) {}\n\n  introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n    return this.baseGuest.introduction();\n  }\n\n  receive(value: T, options?: ReceiveOptions): this {\n    this.middleFn(value, options);\n    return this;\n  }\n}\n","import { GuestAwareType } from \"../Guest/GuestAware\";\nimport { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { PatronPool } from \"../Patron/PatronPool\";\n\nexport type SourceType<T = unknown> = GuestAwareType<T> & GuestObjectType<T>;\n\nexport class Source<T> implements SourceType<T> {\n  private pool = new PatronPool(this);\n\n  public constructor(private sourceDocument: T) {}\n\n  public receive(value: T): this {\n    this.sourceDocument = value;\n    this.pool.receive(this.sourceDocument);\n    return this;\n  }\n\n  public receiving(guest: GuestType<T>): this {\n    if (typeof guest === \"function\") {\n      this.pool.distribute(this.sourceDocument, new Guest(guest));\n    } else {\n      this.pool.distribute(this.sourceDocument, guest);\n    }\n    return this;\n  }\n}\n","import { Guest, GuestObjectType, GuestType, ReceiveOptions } from \"./Guest\";\n\nexport class GuestObject<T> implements GuestObjectType<T> {\n  public constructor(private baseGuest: GuestType<T>) {}\n\n  public receive(value: T, options?: ReceiveOptions): this {\n    let guest = this.baseGuest;\n    if (typeof guest === \"function\") {\n      guest = new Guest(guest);\n    }\n    guest.receive(value, options);\n    return this;\n  }\n\n  public introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n\n    return this.baseGuest.introduction();\n  }\n}\n","import { Guest, GuestObjectType, GuestType } from \"./Guest\";\nimport { GuestPool } from \"./GuestPool\";\nimport { GuestMiddle } from \"./GuestMiddle\";\nimport { Source } from \"../Source/Source\";\nimport { GuestObject } from \"./GuestObject\";\n\nexport interface ChainType<T = unknown> {\n  result(guest: GuestObjectType<T>): this;\n  resultArray(guest: GuestObjectType<T>): this;\n  receiveKey<R>(key: string): GuestObjectType<R>;\n}\n\nexport class GuestChain<T> implements ChainType<T> {\n  private theChain: Source<Record<string, unknown>>;\n\n  private keysKnown = new Set();\n\n  private keysFilled = new Set();\n\n  private filledChainPool = new GuestPool(this);\n\n  public constructor() {\n    this.theChain = new Source<Record<string, unknown>>({});\n  }\n\n  public resultArray(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    this.filledChainPool.add(\n      new GuestMiddle(guestObject, (value: Record<string, unknown>) =>\n        Object.values(value),\n      ),\n    );\n    if (this.isChainFilled()) {\n      this.theChain.receiving(\n        new Guest((chain: Record<string, unknown>) => {\n          this.filledChainPool.receive(Object.values(chain));\n        }),\n      );\n    }\n\n    return this;\n  }\n\n  public result(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    if (this.isChainFilled()) {\n      this.filledChainPool.add(guestObject);\n      this.theChain.receiving(\n        new Guest((chain) => {\n          this.filledChainPool.receive(chain);\n        }),\n      );\n    } else {\n      this.filledChainPool.add(guestObject);\n    }\n    return this;\n  }\n\n  public receiveKey<R>(key: string): GuestObjectType<R> {\n    this.keysKnown.add(key);\n    return new Guest((value) => {\n      // Обернул в очередь чтобы можно было синхронно наполнить очередь известных ключей\n      queueMicrotask(() => {\n        this.theChain.receiving(\n          new Guest((chain: Record<string, unknown>) => {\n            this.keysFilled.add(key);\n            const lastChain = {\n              ...chain,\n              [key]: value,\n            };\n            this.theChain.receive(lastChain);\n            if (this.isChainFilled()) {\n              this.filledChainPool.receive(lastChain);\n            }\n          }),\n        );\n      });\n    });\n  }\n\n  private isChainFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = unknown> extends GuestObjectType<T> {\n  value(): T;\n}\n\nexport class GuestSync<T> implements GuestValueType<T> {\n  public constructor(private theValue: T) {}\n\n  public receive(value: T): this {\n    this.theValue = value;\n    return this;\n  }\n\n  public value() {\n    return this.theValue;\n  }\n}\n","import {\n  give,\n  GuestObjectType,\n  GuestType,\n  ReceiveOptions,\n} from \"../Guest/Guest\";\n\n/**\n * Патрон - это постоянный посетитель\n */\nexport class Patron<T> implements GuestObjectType<T> {\n  public constructor(private willBePatron: GuestType<T>) {}\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public receive(value: T, options?: ReceiveOptions): this {\n    give(value, this.willBePatron, options);\n    return this;\n  }\n}\n","import { PoolType } from \"./PatronPool\";\nimport {\n  give,\n  GuestObjectType,\n  GuestType,\n  ReceiveOptions,\n} from \"../Guest/Guest\";\n\ntype PoolAware = {\n  pool?: PoolType;\n};\n\nexport class PatronOnce<T> implements GuestObjectType<T> {\n  private received = false;\n\n  public constructor(private baseGuest: GuestType<T>) {}\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public receive(value: T, options?: ReceiveOptions): this {\n    if (!this.received) {\n      give(value, this.baseGuest, options);\n    }\n\n    const data = options?.data as PoolAware;\n\n    if (data?.pool) {\n      data.pool.remove(this);\n    }\n\n    return this;\n  }\n}\n","import { give, GuestType } from \"./../Guest/Guest\";\nimport { GuestMiddle } from \"./../Guest/GuestMiddle\";\nimport { Source, SourceType } from \"./Source\";\n\nexport class SourceEmpty<T> implements SourceType<T> {\n  private baseSource = new Source<T | null>(null);\n\n  public receiving(guest: GuestType<T>) {\n    this.baseSource.receiving(\n      new GuestMiddle(guest as GuestType, (value) => {\n        if (value !== null) {\n          give(value, guest);\n        }\n      }),\n    );\n    return this;\n  }\n\n  public receive(value: T): this {\n    this.baseSource.receive(value);\n    return this;\n  }\n}\n","interface Constructable<T> {\n    new(...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n    prototype: T\n}\n\nexport interface FactoryType<T> {\n    create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\nexport class Factory<T> implements FactoryType<T> {\n    public constructor(\n        private constructorFn: Prototyped<T>,\n        private factories: Record<string, unknown> = {},\n    ) { }\n\n    public create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n        return new (this.constructorFn as Constructable<T>)(...args, this.factories) as CT extends null ? T : CT;\n    }\n}\n"],"names":["GuestAware","constructor","guestReceiver","this","receiving","guest","give","data","options","receive","Guest","receiver","value","GuestCast","sourceGuest","targetGuest","introduction","poolSets","Map","removePatronFromPools","patron","forEach","pool","delete","PatronPool","initiator","__publicField","Set","set","patrons","lastMicrotask","doReceive","target","sendValueToGuest","currentMicroTask","queueMicrotask","add","shouldBePatron","remove","distribute","possiblePatron","GuestPool","patronPool","deliverToGuests","guests","clear","GuestMiddle","baseGuest","middleFn","Source","sourceDocument","GuestObject","GuestChain","theChain","resultArray","guestObject","filledChainPool","Object","values","isChainFilled","chain","result","receiveKey","key","keysKnown","keysFilled","lastChain","size","GuestSync","theValue","Patron","willBePatron","PatronOnce","received","SourceEmpty","baseSource","Factory","constructorFn","factories","create","args"],"mappings":"AAMO,MAAMA,EACJ,WAAAC,CAAoBC,GAAAC,KAAAD,cAAAA,CAA+C,CAEnE,SAAAE,CAAUC,GAER,OADPF,KAAKD,cAAcG,GACZA,CACT,ECMc,SAAAC,EACdC,EACAF,EACAG,GAEqB,mBAAVH,EACTA,EAAME,EAAMC,GAENH,EAAAI,QAAQF,EAAMC,EAExB,CAEO,MAAME,EACJ,WAAAT,CAAoBU,GAAAR,KAAAQ,SAAAA,CAAiC,CAErD,OAAAF,CAAQG,EAAUJ,GAEhB,OADFL,KAAAQ,SAASC,EAAOJ,GACdL,IACT,EClCK,MAAMU,EACJ,WAAAZ,CACGa,EACAC,GADAZ,KAAAW,YAAAA,EACAX,KAAAY,YAAAA,CACP,CAEH,YAAAC,GACM,MAA4B,mBAArBb,KAAKW,YACP,QAGJX,KAAKW,YAAYE,aAGfb,KAAKW,YAAYE,eAFf,OAGX,CAEA,OAAAP,CAAQG,EAAUJ,GAET,OADFF,EAAAM,EAAOT,KAAKY,YAAaP,GACvBL,IACT,4JCfF,MAAMc,MAAeC,IAKRC,EAAyBC,IAC3BH,EAAAI,SAASC,IAChBA,EAAKC,OAAOH,EAAM,GACnB,EASI,MAAMI,EAKJ,WAAAvB,CAAoBwB,GAAAtB,KAAAsB,UAAAA,EAJnBC,EAAAvB,KAAA,cAAcwB,KAEfD,EAAAvB,KAAA,WAGIc,EAAAW,IAAIzB,KAAMA,KAAK0B,SAExB,IAAIC,EAAqC,KACnC,MAAAC,EAAY,CAACnB,EAAUJ,KACtBL,KAAA0B,QAAQR,SAASW,IACf7B,KAAA8B,iBAAiBrB,EAAOoB,EAAQxB,EAAO,GAC7C,EAEEL,KAAAM,QAAU,CAACG,EAAUJ,KACxB,MAAM0B,EAAmB,KACnBA,IAAqBJ,GACvBC,EAAUnB,EAAOJ,EACnB,EAIK,OAFSsB,EAAAI,EAChBC,eAAeD,GACR/B,IAAA,CAEX,CAEO,GAAAiC,CAAIC,GAQF,MANqB,mBAAnBA,GACPA,EAAerB,cACmB,WAAlCqB,EAAerB,gBAEVb,KAAA0B,QAAQO,IAAIC,GAEZlC,IACT,CAEO,MAAAmC,CAAOlB,GAEL,OADFjB,KAAA0B,QAAQN,OAAOH,GACbjB,IACT,CAEO,UAAAoC,CAAWnC,EAAcoC,GAGvB,OAFPrC,KAAKiC,IAAII,GACTrC,KAAK8B,iBAAiB7B,EAAWoC,EAAgB,CAAE,GAC5CrC,IACT,CAEQ,gBAAA8B,CACNrB,EACAP,EACAG,GAEAF,EAAKM,EAAOP,EAAO,IACdG,EACHD,KAAM,IACCC,GAASD,MAAoC,CAAC,EACnDkB,UAAWtB,KAAKsB,UAChBH,KAAMnB,OAGZ,4JCjFK,MAAMsC,EAKJ,WAAAxC,CAAYwB,GAJXC,EAAAvB,KAAA,aAAawB,KAEbD,EAAAvB,KAAA,cAGDA,KAAAuC,WAAa,IAAIlB,EAAWC,EACnC,CAEO,OAAAhB,CAAQG,EAAUJ,GAGhB,OAFFL,KAAAwC,gBAAgB/B,EAAOJ,GACvBL,KAAAuC,WAAWjC,QAAQG,EAAOJ,GACxBL,IACT,CAEO,GAAAiC,CAAI/B,GASF,MAPY,mBAAVA,GACNA,EAAMW,cACkB,UAAzBX,EAAMW,gBAEDb,KAAAyC,OAAOR,IAAI/B,GAEbF,KAAAuC,WAAWN,IAAI/B,GACbF,IACT,CAEO,MAAAmC,CAAOlB,GAGL,OAFFjB,KAAAyC,OAAOrB,OAAOH,GACdjB,KAAAuC,WAAWJ,OAAOlB,GAChBjB,IACT,CAEO,UAAAoC,CAAWnC,EAAcoC,GAGvB,OAFPrC,KAAKiC,IAAII,GACTrC,KAAKM,QAAQL,GACND,IACT,CAEQ,eAAAwC,CAAgB/B,EAAUJ,GAC3BL,KAAAyC,OAAOvB,SAASW,IACd1B,EAAAM,EAAOoB,EAAQxB,EAAO,IAE7BL,KAAKyC,OAAOC,OACd,EC9CK,MAAMC,EACJ,WAAA7C,CACG8C,EACAC,GADA7C,KAAA4C,UAAAA,EACA5C,KAAA6C,SAAAA,CACP,CAEH,YAAAhC,GACE,MAA8B,mBAAnBb,KAAK4C,WAA6B5C,KAAK4C,UAAU/B,aAGrDb,KAAK4C,UAAU/B,eAFb,OAGX,CAEA,OAAAP,CAAQG,EAAUJ,GAET,OADFL,KAAA6C,SAASpC,EAAOJ,GACdL,IACT,uICZK,MAAM8C,EAGJ,WAAAhD,CAAoBiD,GAAA/C,KAAA+C,eAAAA,EAFnBxB,EAAAvB,KAAA,OAAO,IAAIqB,EAAWrB,MAEiB,CAExC,OAAAM,CAAQG,GAGN,OAFPT,KAAK+C,eAAiBtC,EACjBT,KAAAmB,KAAKb,QAAQN,KAAK+C,gBAChB/C,IACT,CAEO,SAAAC,CAAUC,GAMR,MALc,mBAAVA,EACTF,KAAKmB,KAAKiB,WAAWpC,KAAK+C,eAAgB,IAAIxC,EAAML,IAEpDF,KAAKmB,KAAKiB,WAAWpC,KAAK+C,eAAgB7C,GAErCF,IACT,ECtBK,MAAMgD,EACJ,WAAAlD,CAAoB8C,GAAA5C,KAAA4C,UAAAA,CAA0B,CAE9C,OAAAtC,CAAQG,EAAUJ,GACvB,IAAIH,EAAQF,KAAK4C,UAKV,MAJc,mBAAV1C,IACDA,EAAA,IAAIK,EAAML,IAEdA,EAAAI,QAAQG,EAAOJ,GACdL,IACT,CAEO,YAAAa,GACL,MAA8B,mBAAnBb,KAAK4C,WAA6B5C,KAAK4C,UAAU/B,aAIrDb,KAAK4C,UAAU/B,eAHb,OAIX,4JCRK,MAAMoC,EASJ,WAAAnD,GARCyB,EAAAvB,KAAA,YAEAuB,EAAAvB,KAAA,gBAAgBwB,KAEhBD,EAAAvB,KAAA,iBAAiBwB,KAEjBD,EAAAvB,KAAA,kBAAkB,IAAIsC,EAAUtC,OAGtCA,KAAKkD,SAAW,IAAIJ,EAAgC,CAAE,EACxD,CAEO,WAAAK,CAAYjD,GACX,MAAAkD,EAAc,IAAIJ,EAAY9C,GAc7B,OAbPF,KAAKqD,gBAAgBpB,IACnB,IAAIU,EAAYS,GAAc3C,GAC5B6C,OAAOC,OAAO9C,MAGdT,KAAKwD,iBACPxD,KAAKkD,SAASjD,UACZ,IAAIM,GAAOkD,IACTzD,KAAKqD,gBAAgB/C,QAAQgD,OAAOC,OAAOE,GAAM,KAKhDzD,IACT,CAEO,MAAA0D,CAAOxD,GACN,MAAAkD,EAAc,IAAIJ,EAAY9C,GAW7B,OAVHF,KAAKwD,iBACFxD,KAAAqD,gBAAgBpB,IAAImB,GACzBpD,KAAKkD,SAASjD,UACZ,IAAIM,GAAOkD,IACJzD,KAAAqD,gBAAgB/C,QAAQmD,EAAK,MAIjCzD,KAAAqD,gBAAgBpB,IAAImB,GAEpBpD,IACT,CAEO,UAAA2D,CAAcC,GAEZ,OADF5D,KAAA6D,UAAU5B,IAAI2B,GACZ,IAAIrD,GAAOE,IAEhBuB,gBAAe,KACbhC,KAAKkD,SAASjD,UACZ,IAAIM,GAAOkD,IACJzD,KAAA8D,WAAW7B,IAAI2B,GACpB,MAAMG,EAAY,IACbN,EACHG,CAACA,GAAMnD,GAEJT,KAAAkD,SAAS5C,QAAQyD,GAClB/D,KAAKwD,iBACFxD,KAAAqD,gBAAgB/C,QAAQyD,EAC/B,IAEJ,GACD,GAEL,CAEQ,aAAAP,GAEJ,OAAAxD,KAAK8D,WAAWE,KAAO,GAAKhE,KAAK8D,WAAWE,OAAShE,KAAK6D,UAAUG,IAExE,EC9EK,MAAMC,EACJ,WAAAnE,CAAoBoE,GAAAlE,KAAAkE,SAAAA,CAAc,CAElC,OAAA5D,CAAQG,GAEN,OADPT,KAAKkE,SAAWzD,EACTT,IACT,CAEO,KAAAS,GACL,OAAOT,KAAKkE,QACd,ECNK,MAAMC,EACJ,WAAArE,CAAoBsE,GAAApE,KAAAoE,aAAAA,CAA6B,CAEjD,YAAAvD,GACE,MAAA,QACT,CAEO,OAAAP,CAAQG,EAAUJ,GAEhB,OADFF,EAAAM,EAAOT,KAAKoE,aAAc/D,GACxBL,IACT,uICRK,MAAMqE,EAGJ,WAAAvE,CAAoB8C,GAAA5C,KAAA4C,UAAAA,EAF3BrB,EAAAvB,KAAQ,YAAW,EAEkC,CAE9C,YAAAa,GACE,MAAA,QACT,CAEO,OAAAP,CAAQG,EAAUJ,GAClBL,KAAKsE,UACHnE,EAAAM,EAAOT,KAAK4C,UAAWvC,GAG9B,MAAMD,EAAOC,GAASD,KAMf,OAJHA,GAAMe,MACHf,EAAAe,KAAKgB,OAAOnC,MAGZA,IACT,uIC7BK,MAAMuE,EAAN,WAAAzE,GACGyB,EAAAvB,KAAA,aAAa,IAAI8C,EAAiB,MAAI,CAEvC,SAAA7C,CAAUC,GAQR,OAPPF,KAAKwE,WAAWvE,UACd,IAAI0C,EAAYzC,GAAqBO,IACrB,OAAVA,GACFN,EAAKM,EAAOP,EACd,KAGGF,IACT,CAEO,OAAAM,CAAQG,GAEN,OADFT,KAAAwE,WAAWlE,QAAQG,GACjBT,IACT,ECTK,MAAMyE,EACF,WAAA3E,CACK4E,EACAC,EAAqC,IADrC3E,KAAA0E,cAAAA,EACA1E,KAAA2E,UAAAA,CACR,CAEG,MAAAC,IAA0CC,GAC7C,OAAO,IAAK7E,KAAK0E,iBAAsCG,EAAM7E,KAAK2E,UACtE"}