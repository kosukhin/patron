{"version":3,"file":"patron.min.mjs","sources":["../src/Guest/GuestAware.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Patron/PatronPool.ts","../src/Source/Source.ts","../src/Guest/GuestObject.ts","../src/Guest/GuestPool.ts","../src/Guest/GuestChain.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Source/SourceEmpty.ts","../src/Factory/Factory.ts"],"sourcesContent":["import { GuestType } from \"./Guest\";\n\nexport interface GuestAwareType<T = unknown> {\n  value(guest: GuestType<T>): unknown;\n}\n\nexport class GuestAware<T = unknown> implements GuestAwareType<T> {\n  public constructor(private guestReceiver: (guest: GuestType<T>) => void) {}\n\n  public value(guest: GuestType<T>): GuestType<T> {\n    this.guestReceiver(guest);\n    return guest;\n  }\n}\n","type GuestIntroduction = \"guest\" | \"patron\";\n\nexport interface GiveOptions {\n  data?: unknown;\n}\n\nexport type GuestExecutorType<T = unknown> = (\n  value: T,\n  options?: GiveOptions,\n) => void;\n\nexport interface GuestObjectType<T = unknown> {\n  give(value: T, options?: GiveOptions): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = unknown> = GuestExecutorType<T> | GuestObjectType<T>;\n\nexport function give<T>(data: T, guest: GuestType<T>, options?: GiveOptions) {\n  if (typeof guest === \"function\") {\n    guest(data, options);\n  } else {\n    guest.give(data, options);\n  }\n}\n\nexport class Guest<T> implements GuestObjectType<T> {\n  public constructor(private receiver: GuestExecutorType<T>) {}\n\n  public give(value: T, options?: GiveOptions) {\n    this.receiver(value, options);\n    return this;\n  }\n}\n","import { give, GuestObjectType, GuestType, GiveOptions } from \"./Guest\";\n\nexport class GuestCast<T> implements GuestObjectType<T> {\n  public constructor(\n    private sourceGuest: GuestType<unknown>,\n    private targetGuest: GuestType<T>,\n  ) {}\n\n  public introduction() {\n    if (typeof this.sourceGuest === \"function\") {\n      return \"guest\";\n    }\n    if (!this.sourceGuest.introduction) {\n      return \"guest\";\n    }\n    return this.sourceGuest.introduction();\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.targetGuest, options);\n    return this;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"../Guest/Guest\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\n\n// remove patron from all pools\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\n// check patron existed in any pool\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = unknown> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n}\n\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T, options?: GiveOptions) => this;\n\n  public constructor(private initiator: unknown) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    let lastMicrotask: (() => void) | null = null;\n    const doReceive = (value: T, options?: GiveOptions) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target, options);\n      });\n    };\n    this.give = (value: T, options?: GiveOptions) => {\n      const currentMicroTask = () => {\n        if (currentMicroTask === lastMicrotask) {\n          doReceive(value, options);\n        }\n      };\n      lastMicrotask = currentMicroTask;\n      queueMicrotask(currentMicroTask);\n      return this;\n    };\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron, {});\n    return this;\n  }\n\n  private sendValueToGuest(\n    value: T,\n    guest: GuestType<T>,\n    options?: GiveOptions,\n  ) {\n    const isDisposed = this.guestDisposed(value, guest);\n\n    if (!isDisposed) {\n      give(value, guest, {\n        ...options,\n        data: {\n          ...((options?.data as Record<string, unknown>) ?? {}),\n          initiator: this.initiator,\n          pool: this,\n        },\n      });\n    }\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { GuestAwareType } from \"../Guest/GuestAware\";\nimport { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { PatronPool } from \"../Patron/PatronPool\";\n\nexport type SourceType<T = unknown> = GuestAwareType<T> & GuestObjectType<T>;\n\nexport class Source<T> implements SourceType<T> {\n  private pool = new PatronPool(this);\n\n  public constructor(private sourceDocument: T) {}\n\n  public give(value: T): this {\n    this.sourceDocument = value;\n    this.pool.give(this.sourceDocument);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    if (typeof guest === \"function\") {\n      this.pool.distribute(this.sourceDocument, new Guest(guest));\n    } else {\n      this.pool.distribute(this.sourceDocument, guest);\n    }\n    return this;\n  }\n}\n","import { Guest, GuestObjectType, GuestType, GiveOptions } from \"./Guest\";\n\nexport class GuestObject<T> implements GuestObjectType<T> {\n  public constructor(private baseGuest: GuestType<T>) {}\n\n  public give(value: T, options?: GiveOptions): this {\n    let guest = this.baseGuest;\n    if (typeof guest === \"function\") {\n      guest = new Guest(guest);\n    }\n    guest.give(value, options);\n    return this;\n  }\n\n  public introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n    return this.baseGuest.introduction();\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { PoolType } from \"../Patron/PatronPool\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"./Guest\";\n\nexport class GuestPool<T> implements GuestObjectType<T>, PoolType<T> {\n  private guests = new Set<GuestType<T>>();\n\n  private patronPool: PatronPool<T>;\n\n  public constructor(initiator: unknown) {\n    this.patronPool = new PatronPool(initiator);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    this.deliverToGuests(value, options);\n    this.patronPool.give(value, options);\n    return this;\n  }\n\n  public add(guest: GuestType<T>): this {\n    if (\n      typeof guest === \"function\" ||\n      !guest.introduction ||\n      guest.introduction() === \"guest\"\n    ) {\n      this.guests.add(guest);\n    }\n    this.patronPool.add(guest);\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>): this {\n    this.guests.delete(patron);\n    this.patronPool.remove(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestObjectType<T>): this {\n    this.add(possiblePatron);\n    this.give(receiving);\n    return this;\n  }\n\n  private deliverToGuests(value: T, options?: GiveOptions) {\n    this.guests.forEach((target) => {\n      give(value, target, options);\n    });\n    this.guests.clear();\n  }\n}\n","import { GuestCast } from \"./GuestCast\";\nimport { Source } from \"../Source/Source\";\nimport { Guest, GuestObjectType, GuestType } from \"./Guest\";\nimport { GuestObject } from \"./GuestObject\";\nimport { GuestPool } from \"./GuestPool\";\n\nexport interface ChainType<T = unknown> {\n  result(guest: GuestObjectType<T>): this;\n  resultArray(guest: GuestObjectType<T>): this;\n  receiveKey<R>(key: string): GuestObjectType<R>;\n}\n\nexport class GuestChain<T> implements ChainType<T> {\n  private theChain: Source<Record<string, unknown>>;\n\n  private keysKnown = new Set();\n\n  private keysFilled = new Set();\n\n  private filledChainPool = new GuestPool(this);\n\n  public constructor() {\n    this.theChain = new Source<Record<string, unknown>>({});\n  }\n\n  public resultArray(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    this.filledChainPool.add(\n      new GuestCast(guestObject, (value: Record<string, unknown>) => {\n        guestObject.give(Object.values(value) as T);\n      }),\n    );\n    if (this.isChainFilled()) {\n      this.theChain.value(\n        new Guest((chain: Record<string, unknown>) => {\n          this.filledChainPool.give(Object.values(chain));\n        }),\n      );\n    }\n    return this;\n  }\n\n  public result(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    if (this.isChainFilled()) {\n      this.filledChainPool.add(guestObject);\n      this.theChain.value(\n        new Guest((chain) => {\n          this.filledChainPool.give(chain);\n        }),\n      );\n    } else {\n      this.filledChainPool.add(guestObject);\n    }\n    return this;\n  }\n\n  public receiveKey<R>(key: string): GuestObjectType<R> {\n    this.keysKnown.add(key);\n    return new Guest((value) => {\n      // Обернул в очередь чтобы можно было синхронно наполнить очередь известных ключей\n      queueMicrotask(() => {\n        this.theChain.value(\n          new Guest((chain: Record<string, unknown>) => {\n            this.keysFilled.add(key);\n            const lastChain = {\n              ...chain,\n              [key]: value,\n            };\n            this.theChain.give(lastChain);\n            if (this.isChainFilled()) {\n              this.filledChainPool.give(lastChain);\n            }\n          }),\n        );\n      });\n    });\n  }\n\n  private isChainFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = unknown> extends GuestObjectType<T> {\n  value(): T;\n}\n\nexport class GuestSync<T> implements GuestValueType<T> {\n  public constructor(private theValue: T) {}\n\n  public give(value: T): this {\n    this.theValue = value;\n    return this;\n  }\n\n  public value() {\n    return this.theValue;\n  }\n}\n","import { give, GiveOptions, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = unknown> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport class GuestDisposable<T> implements GuestDisposableType<T> {\n  public constructor(\n    private guest: GuestType,\n    private disposeCheck: (value: T | null) => boolean,\n  ) {}\n\n  public disposed(value: T | null): boolean {\n    return this.disposeCheck(value);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.guest, options);\n    return this;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"../Guest/Guest\";\n\nexport class Patron<T> implements GuestDisposableType<T> {\n  public constructor(private willBePatron: GuestType<T>) {}\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.willBePatron, options);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.willBePatron as GuestDisposableType;\n    return maybeDisposable?.disposed?.(value) || false;\n  }\n}\n","import { PoolType } from \"./PatronPool\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"../Guest/Guest\";\n\ntype PoolAware = {\n  pool?: PoolType;\n};\n\nexport class PatronOnce<T> implements GuestObjectType<T> {\n  private received = false;\n\n  public constructor(private baseGuest: GuestType<T>) {}\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    if (!this.received) {\n      give(value, this.baseGuest, options);\n    }\n    const data = options?.data as PoolAware;\n    if (data?.pool) {\n      data.pool.remove(this);\n    }\n    return this;\n  }\n}\n","import { GuestCast } from \"../Guest/GuestCast\";\nimport { give, GuestType } from \"./../Guest/Guest\";\nimport { Source, SourceType } from \"./Source\";\n\nexport class SourceEmpty<T> implements SourceType<T> {\n  private baseSource = new Source<T | null>(null);\n\n  public value(guest: GuestType<T>) {\n    this.baseSource.value(\n      new GuestCast(guest as GuestType, (value) => {\n        if (value !== null) {\n          give(value, guest);\n        }\n      }),\n    );\n    return this;\n  }\n\n  public give(value: T): this {\n    this.baseSource.give(value);\n    return this;\n  }\n}\n","interface Constructable<T> {\n  new (...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport interface FactoryType<T> {\n  create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\nexport class Factory<T> implements FactoryType<T> {\n  public constructor(\n    private constructorFn: Prototyped<T>,\n    private factories: Record<string, unknown> = {},\n  ) {}\n\n  public create<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return new (this.constructorFn as Constructable<T>)(\n      ...args,\n      this.factories,\n    ) as CT extends null ? T : CT;\n  }\n}\n"],"names":["GuestAware","constructor","guestReceiver","this","value","guest","give","data","options","Guest","receiver","GuestCast","sourceGuest","targetGuest","introduction","poolSets","Map","removePatronFromPools","patron","forEach","pool","delete","isPatronInPools","inPool","has","PatronPool","initiator","__publicField","patrons","Set","set","lastMicrotask","doReceive","target","sendValueToGuest","currentMicroTask","queueMicrotask","add","shouldBePatron","Error","remove","distribute","receiving","possiblePatron","guestDisposed","disposed","Source","sourceDocument","GuestObject","baseGuest","GuestPool","patronPool","deliverToGuests","guests","clear","GuestChain","theChain","resultArray","guestObject","filledChainPool","Object","values","isChainFilled","chain","result","receiveKey","key","keysKnown","keysFilled","lastChain","size","GuestSync","theValue","GuestDisposable","disposeCheck","Patron","willBePatron","maybeDisposable","PatronOnce","received","SourceEmpty","baseSource","Factory","constructorFn","factories","create","args"],"mappings":"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"}