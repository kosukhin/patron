{"version":3,"file":"patron.min.mjs","sources":["../src/Guest/GuestAware.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Patron/PatronPool.ts","../src/Source/Source.ts","../src/Guest/GuestObject.ts","../src/Guest/GuestPool.ts","../src/Guest/GuestChain.ts","../src/Source/SourceEmpty.ts","../src/Guest/GuestAwareSequence.ts","../src/Guest/GuestAwareMap.ts","../src/Guest/GuestAwareRace.ts","../src/Guest/GuestAwareActive.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Source/SourceDynamic.ts","../src/Factory/Factory.ts","../src/Factory/Module.ts"],"sourcesContent":["import { GuestType } from \"./Guest\";\n\nexport type GuestAwareExecutorType<T> = (guest: GuestType<T>) => unknown;\n\nexport interface GuestAwareObjectType<T> {\n  value: GuestAwareExecutorType<T>\n}\n\nexport type GuestAwareType<T = any> = GuestAwareExecutorType<T> | GuestAwareObjectType<T>\n\nexport function value<T>(guestAware: GuestAwareType<T>, guest: GuestType<T>) {\n  if (typeof guestAware === 'function') {\n    return guestAware(guest);\n  } else {\n    return guestAware.value(guest);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware\n */\nexport class GuestAware<T = any> implements GuestAwareObjectType<T> {\n  public constructor(private guestAware: GuestAwareType<T>) { }\n\n  public value(guest: GuestType<T>): GuestType<T> {\n    value(this.guestAware, guest);\n    return guest;\n  }\n}\n","type GuestIntroduction = \"guest\" | \"patron\";\n\nexport interface GiveOptions {\n  data?: unknown;\n}\n\nexport type GuestExecutorType<T = any> = (\n  value: T,\n  options?: GiveOptions,\n) => void;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T, options?: GiveOptions): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/give\n */\nexport function give<T>(data: T, guest: GuestType<T>, options?: GiveOptions) {\n  if (typeof guest === \"function\") {\n    guest(data, options);\n  } else {\n    guest.give(data, options);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest\n */\nexport class Guest<T> implements GuestObjectType<T> {\n  public constructor(private receiver: GuestExecutorType<T>) { }\n\n  public give(value: T, options?: GiveOptions) {\n    this.receiver(value, options);\n    return this;\n  }\n}\n","import {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"./GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-cast\n */\nexport class GuestCast<T> implements GuestDisposableType<T> {\n  public constructor(\n    private sourceGuest: GuestType<any>,\n    private targetGuest: GuestType<T>,\n  ) { }\n\n  public introduction() {\n    if (typeof this.sourceGuest === \"function\") {\n      return \"guest\";\n    }\n    if (!this.sourceGuest.introduction) {\n      return \"guest\";\n    }\n    return this.sourceGuest.introduction();\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.targetGuest, options);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.sourceGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"../Guest/Guest\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T, options?: GiveOptions) => this;\n\n  public constructor(private initiator: unknown) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    let lastMicrotask: (() => void) | null = null;\n    const doReceive = (value: T, options?: GiveOptions) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target, options);\n      });\n    };\n    this.give = (value: T, options?: GiveOptions) => {\n      const currentMicroTask = () => {\n        if (currentMicroTask === lastMicrotask) {\n          doReceive(value, options);\n        }\n      };\n      lastMicrotask = currentMicroTask;\n      queueMicrotask(currentMicroTask);\n      return this;\n    };\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron, {});\n    return this;\n  }\n\n  private sendValueToGuest(\n    value: T,\n    guest: GuestType<T>,\n    options?: GiveOptions,\n  ) {\n    const isDisposed = this.guestDisposed(value, guest);\n\n    if (!isDisposed) {\n      give(value, guest, {\n        ...options,\n        data: {\n          ...((options?.data as Record<string, unknown>) ?? {}),\n          initiator: this.initiator,\n          pool: this,\n        },\n      });\n    }\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { GuestAwareObjectType } from \"../Guest/GuestAware\";\nimport { PatronPool } from \"../Patron/PatronPool\";\n\nexport interface PoolAware<T = any> {\n  pool(): PatronPool<T>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source\n */\nexport type SourceType<T = any> = GuestAwareObjectType<T> &\n  GuestObjectType<T> &\n  PoolAware<T>;\n\nexport class Source<T> implements SourceType<T> {\n  private thePool = new PatronPool(this);\n\n  public constructor(private sourceDocument: T) { }\n\n  public pool() {\n    return this.thePool;\n  }\n\n  public give(value: T): this {\n    this.sourceDocument = value;\n    this.thePool.give(this.sourceDocument);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    if (typeof guest === \"function\") {\n      this.thePool.distribute(this.sourceDocument, new Guest(guest));\n    } else {\n      this.thePool.distribute(this.sourceDocument, guest);\n    }\n    return this;\n  }\n}\n","import {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"./GuestDisposable\";\nimport { GiveOptions, Guest, GuestType } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-object\n */\nexport class GuestObject<T> implements GuestDisposableType<T> {\n  public constructor(private baseGuest: GuestType<T>) { }\n\n  public give(value: T, options?: GiveOptions): this {\n    let guest = this.baseGuest;\n    if (typeof guest === \"function\") {\n      guest = new Guest(guest);\n    }\n    guest.give(value, options);\n    return this;\n  }\n\n  public introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n    return this.baseGuest.introduction();\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { PoolType } from \"../Patron/PatronPool\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-pool\n */\nexport class GuestPool<T> implements GuestObjectType<T>, PoolType<T> {\n  private guests = new Set<GuestType<T>>();\n\n  private patronPool: PatronPool<T>;\n\n  public constructor(initiator: unknown) {\n    this.patronPool = new PatronPool(initiator);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    this.deliverToGuests(value, options);\n    this.patronPool.give(value, options);\n    return this;\n  }\n\n  public add(guest: GuestType<T>): this {\n    if (\n      typeof guest === \"function\" ||\n      !guest.introduction ||\n      guest.introduction() === \"guest\"\n    ) {\n      this.guests.add(guest);\n    }\n    this.patronPool.add(guest);\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>): this {\n    this.guests.delete(patron);\n    this.patronPool.remove(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestObjectType<T>): this {\n    this.add(possiblePatron);\n    this.give(receiving);\n    return this;\n  }\n\n  public size() {\n    return this.patronPool.size() + this.guests.size;\n  }\n\n  private deliverToGuests(value: T, options?: GiveOptions) {\n    this.guests.forEach((target) => {\n      give(value, target, options);\n    });\n    this.guests.clear();\n  }\n}\n","import { GuestCast } from \"./GuestCast\";\nimport { Source } from \"../Source/Source\";\nimport { Guest, GuestObjectType, GuestType } from \"./Guest\";\nimport { GuestObject } from \"./GuestObject\";\nimport { GuestPool } from \"./GuestPool\";\n\nexport interface ChainType<T = any> {\n  result(guest: GuestObjectType<T>): this;\n  resultArray(guest: GuestObjectType<T>): this;\n  receiveKey<R>(key: string): GuestObjectType<R>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-chain\n */\nexport class GuestChain<T> implements ChainType<T> {\n  private theChain: Source<Record<string, unknown>>;\n\n  private keysKnown = new Set();\n\n  private keysFilled = new Set();\n\n  private filledChainPool = new GuestPool(this);\n\n  public constructor() {\n    this.theChain = new Source<Record<string, unknown>>({});\n  }\n\n  public resultArray(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    this.filledChainPool.add(\n      new GuestCast(guestObject, (value: Record<string, unknown>) => {\n        guestObject.give(Object.values(value) as T);\n      }),\n    );\n    if (this.isChainFilled()) {\n      this.theChain.value(\n        new Guest((chain: Record<string, unknown>) => {\n          this.filledChainPool.give(Object.values(chain));\n        }),\n      );\n    }\n    return this;\n  }\n\n  public result(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    if (this.isChainFilled()) {\n      this.filledChainPool.add(guestObject);\n      this.theChain.value(\n        new Guest((chain) => {\n          this.filledChainPool.give(chain);\n        }),\n      );\n    } else {\n      this.filledChainPool.add(guestObject);\n    }\n    return this;\n  }\n\n  public receiveKey<R>(key: string): GuestObjectType<R> {\n    this.keysKnown.add(key);\n    return new Guest((value) => {\n      // Обернул в очередь чтобы можно было синхронно наполнить очередь известных ключей\n      queueMicrotask(() => {\n        this.theChain.value(\n          new Guest((chain: Record<string, unknown>) => {\n            this.keysFilled.add(key);\n            const lastChain = {\n              ...chain,\n              [key]: value,\n            };\n            this.theChain.give(lastChain);\n            if (this.isChainFilled()) {\n              this.filledChainPool.give(lastChain);\n            }\n          }),\n        );\n      });\n    });\n  }\n\n  private isChainFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { give, GuestType } from \"./../Guest/Guest\";\nimport { Source, SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source/source-empty\n */\nexport class SourceEmpty<T> implements SourceType<T> {\n  private baseSource = new Source<T | null>(null);\n\n  public value(guest: GuestType<T>) {\n    this.baseSource.value(\n      new GuestCast(guest as GuestType, (value) => {\n        if (value !== null) {\n          give(value, guest);\n        }\n      }),\n    );\n    return this;\n  }\n\n  public give(value: T): this {\n    this.baseSource.give(value);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    return this.baseSource.pool();\n  }\n}\n","import { FactoryType } from \"../Factory/Factory\";\nimport { give } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, value } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestChain } from \"./GuestChain\";\nimport { GuestType } from \"./Guest\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-sequence\n */\nexport class GuestAwareSequence<T, TG> implements GuestAwareObjectType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSourceFactory: FactoryType<GuestAwareType<TG>>\n  ) { }\n\n  public value(guest: GuestType<TG[]>) {\n    const chain = new GuestChain<TG[]>();\n    const sequenceSource = new SourceEmpty();\n    const targetSource = this.targetSourceFactory.create(\n      sequenceSource\n    )\n\n    value(\n      this.baseSource,\n      new GuestCast(guest, (theValue) => {\n        let index = 0;\n\n        const nextItemHandle = () => {\n          if (theValue[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          } else {\n            chain.resultArray(guest);\n          }\n        }\n\n        function handle() {\n          sequenceSource.give(theValue[index]);\n          value(targetSource, chain.receiveKey('' + index));\n          value(targetSource, nextItemHandle);\n        }\n\n        if (theValue[index] !== undefined) {\n          handle();\n        } else {\n          give([], guest);\n        }\n      })\n    );\n    return this;\n  }\n}\n","import { FactoryType } from \"../Factory/Factory\";\nimport { give } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, value } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestChain } from \"./GuestChain\";\nimport { GuestType } from \"./Guest\";\nimport { GuestAware } from \"./GuestAware\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-map\n */\nexport class GuestAwareMap<T, TG> implements GuestAwareObjectType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSourceFactory: FactoryType<GuestAwareType<TG>>\n  ) { }\n\n  public value(guest: GuestType<TG[]>) {\n    const chain = new GuestChain();\n    value(\n      this.baseSource,\n      new GuestCast(<GuestType>guest, (theValue) => {\n        theValue.forEach((val, index) => {\n          const targetSource = this.targetSourceFactory.create(\n            new GuestAware((innerGuest) => {\n              give(val, innerGuest);\n            })\n          )\n          value(targetSource, chain.receiveKey('' + index));\n        });\n      })\n    )\n    chain.resultArray(<GuestType>guest);\n    return this;\n  }\n}\n","import { give, GuestType } from \"./Guest\";\nimport { GuestAwareObjectType, GuestAwareType, value } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-race\n */\nexport class GuestAwareRace<T> implements GuestAwareObjectType<T> {\n  public constructor(private guestAwares: GuestAwareType<T>[]) { }\n\n  public value(guest: GuestType<T>): this {\n    let connectedWithGuestAware: GuestAwareType | null = null;\n    this.guestAwares.forEach(guestAware => {\n      value(\n        guestAware,\n        new GuestCast(<GuestType>guest, (value) => {\n          if (!connectedWithGuestAware || connectedWithGuestAware === guestAware) {\n            give(value as T, guest);\n            connectedWithGuestAware = guestAware\n          }\n        })\n      );\n    });\n    return this;\n  }\n}\n","import { SourceType } from \"../Source/Source\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\nimport { GuestType } from \"./Guest\";\nimport { GuestAwareObjectType } from \"./GuestAware\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/action-type\n */\nexport interface ActionType<P = any> {\n  do(config: P): this;\n}\n\nexport interface GuestAwareAcitveType<R = unknown, T = unknown> extends GuestAwareObjectType<T>, ActionType<R> {\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-active\n */\nexport class GuestAwareActive<R, T> implements GuestAwareAcitveType<R, T> {\n  private source = new SourceEmpty<T>();\n\n  public constructor(private configExecutor: (config: R, source: SourceType<T>) => void) { }\n\n  public do(config: R): this {\n    this.configExecutor(config, this.source);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    this.source.value(guest);\n    return this;\n  }\n}\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-sync\n */\nexport class GuestSync<T> implements GuestValueType<T> {\n  public constructor(private theValue: T) { }\n\n  public give(value: T): this {\n    this.theValue = value;\n    return this;\n  }\n\n  public value() {\n    return this.theValue;\n  }\n}\n","import { give, GiveOptions, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-disposable\n */\nexport class GuestDisposable<T> implements GuestDisposableType<T> {\n  public constructor(\n    private guest: GuestType,\n    private disposeCheck: (value: T | null) => boolean,\n  ) { }\n\n  public disposed(value: T | null): boolean {\n    return this.disposeCheck(value);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.guest, options);\n    return this;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"../Guest/Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron\n */\nexport class Patron<T> implements GuestDisposableType<T> {\n  public constructor(private willBePatron: GuestType<T>) { }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.willBePatron, options);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.willBePatron as GuestDisposableType;\n    return maybeDisposable?.disposed?.(value) || false;\n  }\n}\n","import { PoolType } from \"./PatronPool\";\nimport { give, GuestType, GiveOptions } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\ntype PoolAware = {\n  pool?: PoolType;\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-once\n */\nexport class PatronOnce<T> implements GuestDisposableType<T> {\n  private received = false;\n\n  public constructor(private baseGuest: GuestType<T>) { }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    if (!this.received) {\n      give(value, this.baseGuest, options);\n    }\n    const data = options?.data as PoolAware;\n    if (data?.pool) {\n      data.pool.remove(this);\n    }\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { give, GuestType } from \"../Guest/Guest\";\nimport { GuestAwareType, value } from \"../Guest/GuestAware\";\nimport { PatronPool } from \"../Patron/PatronPool\";\nimport { SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source-dynamic\n */\nexport class SourceDynamic<T = unknown> implements SourceType<T> {\n  public constructor(\n    private baseGuest: GuestType<T>,\n    private baseGuestAware: GuestAwareType<T>,\n  ) { }\n\n  public value(guest: GuestType<T>) {\n    value(this.baseGuestAware, guest);\n    return this;\n  }\n\n  public give(value: T) {\n    give(value, this.baseGuest);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    throw Error('No pool in SourceDynamic');\n  }\n}\n","interface Constructable<T> {\n  new(...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport interface FactoryType<T> {\n  create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/factory\n */\nexport class Factory<T> implements FactoryType<T> {\n  public constructor(\n    private constructorFn: Prototyped<T>,\n    private factories: Record<string, unknown> = {},\n  ) { }\n\n  public create<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return new (this.constructorFn as Constructable<T>)(\n      ...args,\n      this.factories,\n    ) as CT extends null ? T : CT;\n  }\n}\n","import { FactoryType } from \"./Factory\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/module\n */\nexport class Module<T> implements FactoryType<T> {\n  public constructor(private buildingFn: (...args: any[]) => T) { }\n\n  public create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n    return this.buildingFn(...args) as CT extends null ? T : CT;\n  }\n}\n"],"names":["value","guestAware","guest","GuestAware","constructor","this","give","data","options","Guest","receiver","GuestCast","sourceGuest","targetGuest","introduction","disposed","maybeDisposable","poolSets","Map","removePatronFromPools","patron","forEach","pool","delete","isPatronInPools","inPool","has","PatronPool","initiator","__publicField","patrons","Set","set","lastMicrotask","doReceive","target","sendValueToGuest","currentMicroTask","queueMicrotask","size","add","shouldBePatron","Error","remove","distribute","receiving","possiblePatron","guestDisposed","Source","sourceDocument","thePool","GuestObject","baseGuest","GuestPool","patronPool","deliverToGuests","guests","clear","GuestChain","theChain","resultArray","guestObject","filledChainPool","Object","values","isChainFilled","chain","result","receiveKey","key","keysKnown","keysFilled","lastChain","SourceEmpty","baseSource","GuestAwareSequence","targetSourceFactory","sequenceSource","targetSource","create","theValue","index","nextItemHandle","handle","GuestAwareMap","val","innerGuest","GuestAwareRace","guestAwares","connectedWithGuestAware","GuestAwareActive","configExecutor","config","source","GuestSync","GuestDisposable","disposeCheck","Patron","willBePatron","PatronOnce","received","SourceDynamic","baseGuestAware","Factory","constructorFn","factories","args","Module","buildingFn"],"mappings":"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"}