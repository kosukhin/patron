{"version":3,"file":"patron.min.mjs","sources":["../src/Guest/GuestAware.ts","../src/Guest/Guest.ts","../src/Guest/GuestCast.ts","../src/Patron/PatronPool.ts","../src/Source/Source.ts","../src/Guest/GuestObject.ts","../src/Guest/GuestPool.ts","../src/Guest/GuestChain.ts","../src/Source/SourceEmpty.ts","../src/Guest/GuestAwareSequence.ts","../src/Guest/GuestAwareMap.ts","../src/Guest/GuestSync.ts","../src/Guest/GuestDisposable.ts","../src/Patron/Patron.ts","../src/Patron/PatronOnce.ts","../src/Factory/Factory.ts","../src/Factory/Module.ts"],"sourcesContent":["import { GuestType } from \"./Guest\";\n\nexport interface GuestAwareType<T = any> {\n  value(guest: GuestType<T>): unknown;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware\n */\nexport class GuestAware<T = any> implements GuestAwareType<T> {\n  public constructor(private guestReceiver: (guest: GuestType<T>) => void) { }\n\n  public value(guest: GuestType<T>): GuestType<T> {\n    this.guestReceiver(guest);\n    return guest;\n  }\n}\n","type GuestIntroduction = \"guest\" | \"patron\";\n\nexport interface GiveOptions {\n  data?: unknown;\n}\n\nexport type GuestExecutorType<T = any> = (\n  value: T,\n  options?: GiveOptions,\n) => void;\n\nexport interface GuestObjectType<T = any> {\n  give(value: T, options?: GiveOptions): this;\n  introduction?(): GuestIntroduction;\n}\n\nexport type GuestType<T = any> = GuestExecutorType<T> | GuestObjectType<T>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/give\n */\nexport function give<T>(data: T, guest: GuestType<T>, options?: GiveOptions) {\n  if (typeof guest === \"function\") {\n    guest(data, options);\n  } else {\n    guest.give(data, options);\n  }\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest\n */\nexport class Guest<T> implements GuestObjectType<T> {\n  public constructor(private receiver: GuestExecutorType<T>) { }\n\n  public give(value: T, options?: GiveOptions) {\n    this.receiver(value, options);\n    return this;\n  }\n}\n","import {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"./GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-cast\n */\nexport class GuestCast<T> implements GuestDisposableType<T> {\n  public constructor(\n    private sourceGuest: GuestType<any>,\n    private targetGuest: GuestType<T>,\n  ) { }\n\n  public introduction() {\n    if (typeof this.sourceGuest === \"function\") {\n      return \"guest\";\n    }\n    if (!this.sourceGuest.introduction) {\n      return \"guest\";\n    }\n    return this.sourceGuest.introduction();\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.targetGuest, options);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.sourceGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"../Guest/Guest\";\n\nconst poolSets = new Map<PoolType, Set<GuestObjectType>>();\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/remove-patron-from-pools\n */\nexport const removePatronFromPools = (patron: GuestObjectType) => {\n  poolSets.forEach((pool) => {\n    pool.delete(patron);\n  });\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/is-patron-in-pools\n */\nexport const isPatronInPools = (patron: GuestObjectType) => {\n  let inPool = false;\n  poolSets.forEach((pool) => {\n    if (!inPool) {\n      inPool = pool.has(patron);\n    }\n  });\n  return inPool;\n};\n\nexport interface PoolType<T = any> extends GuestObjectType<T> {\n  add(guest: GuestObjectType<T>): this;\n  distribute(receiving: T, possiblePatron: GuestObjectType<T>): this;\n  remove(patron: GuestObjectType<T>): this;\n  size(): number;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-pool\n */\nexport class PatronPool<T> implements PoolType<T> {\n  private patrons: Set<GuestObjectType<T>>;\n\n  public give: (value: T, options?: GiveOptions) => this;\n\n  public constructor(private initiator: unknown) {\n    this.patrons = new Set<GuestObjectType<T>>();\n    poolSets.set(this, this.patrons);\n    let lastMicrotask: (() => void) | null = null;\n    const doReceive = (value: T, options?: GiveOptions) => {\n      this.patrons.forEach((target) => {\n        this.sendValueToGuest(value, target, options);\n      });\n    };\n    this.give = (value: T, options?: GiveOptions) => {\n      const currentMicroTask = () => {\n        if (currentMicroTask === lastMicrotask) {\n          doReceive(value, options);\n        }\n      };\n      lastMicrotask = currentMicroTask;\n      queueMicrotask(currentMicroTask);\n      return this;\n    };\n  }\n\n  public size(): number {\n    return this.patrons.size;\n  }\n\n  public add(shouldBePatron: GuestType<T>) {\n    if (!shouldBePatron) {\n      throw new Error(\"PatronPool add method received nothing!\");\n    }\n    if (\n      typeof shouldBePatron !== \"function\" &&\n      shouldBePatron.introduction &&\n      shouldBePatron.introduction() === \"patron\"\n    ) {\n      this.patrons.add(shouldBePatron);\n    }\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>) {\n    this.patrons.delete(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestType<T>): this {\n    this.add(possiblePatron);\n    this.sendValueToGuest(receiving, possiblePatron, {});\n    return this;\n  }\n\n  private sendValueToGuest(\n    value: T,\n    guest: GuestType<T>,\n    options?: GiveOptions,\n  ) {\n    const isDisposed = this.guestDisposed(value, guest);\n\n    if (!isDisposed) {\n      give(value, guest, {\n        ...options,\n        data: {\n          ...((options?.data as Record<string, unknown>) ?? {}),\n          initiator: this.initiator,\n          pool: this,\n        },\n      });\n    }\n  }\n\n  private guestDisposed(value: T, guest: GuestType<T>) {\n    if ((guest as GuestDisposableType).disposed?.(value)) {\n      this.remove(guest as GuestObjectType);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { GuestAwareType } from \"../Guest/GuestAware\";\nimport { Guest, GuestObjectType, GuestType } from \"../Guest/Guest\";\nimport { PatronPool } from \"../Patron/PatronPool\";\n\nexport interface PoolAware<T = any> {\n  pool(): PatronPool<T>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source\n */\nexport type SourceType<T = any> = GuestAwareType<T> &\n  GuestObjectType<T> &\n  PoolAware<T>;\n\nexport class Source<T> implements SourceType<T> {\n  private thePool = new PatronPool(this);\n\n  public constructor(private sourceDocument: T) { }\n\n  public pool() {\n    return this.thePool;\n  }\n\n  public give(value: T): this {\n    this.sourceDocument = value;\n    this.thePool.give(this.sourceDocument);\n    return this;\n  }\n\n  public value(guest: GuestType<T>): this {\n    if (typeof guest === \"function\") {\n      this.thePool.distribute(this.sourceDocument, new Guest(guest));\n    } else {\n      this.thePool.distribute(this.sourceDocument, guest);\n    }\n    return this;\n  }\n}\n","import {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"./GuestDisposable\";\nimport { GiveOptions, Guest, GuestType } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-object\n */\nexport class GuestObject<T> implements GuestDisposableType<T> {\n  public constructor(private baseGuest: GuestType<T>) { }\n\n  public give(value: T, options?: GiveOptions): this {\n    let guest = this.baseGuest;\n    if (typeof guest === \"function\") {\n      guest = new Guest(guest);\n    }\n    guest.give(value, options);\n    return this;\n  }\n\n  public introduction() {\n    if (typeof this.baseGuest === \"function\" || !this.baseGuest.introduction) {\n      return \"guest\";\n    }\n    return this.baseGuest.introduction();\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { PoolType } from \"../Patron/PatronPool\";\nimport { give, GuestObjectType, GuestType, GiveOptions } from \"./Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-pool\n */\nexport class GuestPool<T> implements GuestObjectType<T>, PoolType<T> {\n  private guests = new Set<GuestType<T>>();\n\n  private patronPool: PatronPool<T>;\n\n  public constructor(initiator: unknown) {\n    this.patronPool = new PatronPool(initiator);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    this.deliverToGuests(value, options);\n    this.patronPool.give(value, options);\n    return this;\n  }\n\n  public add(guest: GuestType<T>): this {\n    if (\n      typeof guest === \"function\" ||\n      !guest.introduction ||\n      guest.introduction() === \"guest\"\n    ) {\n      this.guests.add(guest);\n    }\n    this.patronPool.add(guest);\n    return this;\n  }\n\n  public remove(patron: GuestObjectType<T>): this {\n    this.guests.delete(patron);\n    this.patronPool.remove(patron);\n    return this;\n  }\n\n  public distribute(receiving: T, possiblePatron: GuestObjectType<T>): this {\n    this.add(possiblePatron);\n    this.give(receiving);\n    return this;\n  }\n\n  public size() {\n    return this.patronPool.size() + this.guests.size;\n  }\n\n  private deliverToGuests(value: T, options?: GiveOptions) {\n    this.guests.forEach((target) => {\n      give(value, target, options);\n    });\n    this.guests.clear();\n  }\n}\n","import { GuestCast } from \"./GuestCast\";\nimport { Source } from \"../Source/Source\";\nimport { Guest, GuestObjectType, GuestType } from \"./Guest\";\nimport { GuestObject } from \"./GuestObject\";\nimport { GuestPool } from \"./GuestPool\";\n\nexport interface ChainType<T = any> {\n  result(guest: GuestObjectType<T>): this;\n  resultArray(guest: GuestObjectType<T>): this;\n  receiveKey<R>(key: string): GuestObjectType<R>;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-chain\n */\nexport class GuestChain<T> implements ChainType<T> {\n  private theChain: Source<Record<string, unknown>>;\n\n  private keysKnown = new Set();\n\n  private keysFilled = new Set();\n\n  private filledChainPool = new GuestPool(this);\n\n  public constructor() {\n    this.theChain = new Source<Record<string, unknown>>({});\n  }\n\n  public resultArray(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    this.filledChainPool.add(\n      new GuestCast(guestObject, (value: Record<string, unknown>) => {\n        guestObject.give(Object.values(value) as T);\n      }),\n    );\n    if (this.isChainFilled()) {\n      this.theChain.value(\n        new Guest((chain: Record<string, unknown>) => {\n          this.filledChainPool.give(Object.values(chain));\n        }),\n      );\n    }\n    return this;\n  }\n\n  public result(guest: GuestType<T>) {\n    const guestObject = new GuestObject(guest);\n    if (this.isChainFilled()) {\n      this.filledChainPool.add(guestObject);\n      this.theChain.value(\n        new Guest((chain) => {\n          this.filledChainPool.give(chain);\n        }),\n      );\n    } else {\n      this.filledChainPool.add(guestObject);\n    }\n    return this;\n  }\n\n  public receiveKey<R>(key: string): GuestObjectType<R> {\n    this.keysKnown.add(key);\n    return new Guest((value) => {\n      // Обернул в очередь чтобы можно было синхронно наполнить очередь известных ключей\n      queueMicrotask(() => {\n        this.theChain.value(\n          new Guest((chain: Record<string, unknown>) => {\n            this.keysFilled.add(key);\n            const lastChain = {\n              ...chain,\n              [key]: value,\n            };\n            this.theChain.give(lastChain);\n            if (this.isChainFilled()) {\n              this.filledChainPool.give(lastChain);\n            }\n          }),\n        );\n      });\n    });\n  }\n\n  private isChainFilled() {\n    return (\n      this.keysFilled.size > 0 && this.keysFilled.size === this.keysKnown.size\n    );\n  }\n}\n","import { PatronPool } from \"../Patron/PatronPool\";\nimport { GuestCast } from \"../Guest/GuestCast\";\nimport { give, GuestType } from \"./../Guest/Guest\";\nimport { Source, SourceType } from \"./Source\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/source/source-empty\n */\nexport class SourceEmpty<T> implements SourceType<T> {\n  private baseSource = new Source<T | null>(null);\n\n  public value(guest: GuestType<T>) {\n    this.baseSource.value(\n      new GuestCast(guest as GuestType, (value) => {\n        if (value !== null) {\n          give(value, guest);\n        }\n      }),\n    );\n    return this;\n  }\n\n  public give(value: T): this {\n    this.baseSource.give(value);\n    return this;\n  }\n\n  public pool(): PatronPool<T> {\n    return this.baseSource.pool();\n  }\n}\n","import { FactoryType } from \"../Factory/Factory\";\nimport { give } from \"./Guest\";\nimport { GuestAwareType } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestChain } from \"./GuestChain\";\nimport { GuestType } from \"./Guest\";\nimport { SourceEmpty } from \"../Source/SourceEmpty\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-sequence\n */\nexport class GuestAwareSequence<T, TG> implements GuestAwareType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSourceFactory: FactoryType<GuestAwareType<TG>>\n  ) { }\n\n  public value(guest: GuestType<TG[]>) {\n    const chain = new GuestChain<TG[]>();\n    const sequenceSource = new SourceEmpty();\n    const targetSource = this.targetSourceFactory.create(\n      sequenceSource\n    )\n\n    this.baseSource.value(\n      new GuestCast(guest, (value) => {\n        let index = 0;\n\n        const nextItemHandle = () => {\n          if (value[index + 1] !== undefined) {\n            index = index + 1;\n            handle();\n          } else {\n            chain.resultArray(guest);\n          }\n        }\n\n        function handle() {\n          sequenceSource.give(value[index]);\n          targetSource.value(chain.receiveKey('' + index));\n          targetSource.value(nextItemHandle);\n        }\n\n        if (value[index] !== undefined) {\n          handle();\n        } else {\n          give([], guest);\n        }\n      })\n    );\n\n    return this;\n  }\n}\n","import { FactoryType } from \"../Factory/Factory\";\nimport { give } from \"./Guest\";\nimport { GuestAwareType } from \"./GuestAware\";\nimport { GuestCast } from \"./GuestCast\";\nimport { GuestChain } from \"./GuestChain\";\nimport { GuestType } from \"./Guest\";\nimport { GuestAware } from \"./GuestAware\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-aware-map\n */\nexport class GuestAwareMap<T, TG> implements GuestAwareType<TG[]> {\n  public constructor(\n    private baseSource: GuestAwareType<T[]>,\n    private targetSourceFactory: FactoryType<GuestAwareType<TG>>\n  ) { }\n\n  value(guest: GuestType<TG[]>) {\n    const chain = new GuestChain();\n    this.baseSource.value(\n      new GuestCast(<GuestType>guest, (value) => {\n        value.forEach((val, index) => {\n          const targetSource = this.targetSourceFactory.create(\n            new GuestAware((innerGuest) => {\n              give(val, innerGuest);\n            })\n          )\n          targetSource.value(chain.receiveKey('' + index));\n        });\n      })\n    );\n    chain.resultArray(<GuestType>guest);\n    return this;\n  }\n}\n","import { GuestObjectType } from \"./Guest\";\n\nexport interface GuestValueType<T = any> extends GuestObjectType<T> {\n  value(): T;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-sync\n */\nexport class GuestSync<T> implements GuestValueType<T> {\n  public constructor(private theValue: T) { }\n\n  public give(value: T): this {\n    this.theValue = value;\n    return this;\n  }\n\n  public value() {\n    return this.theValue;\n  }\n}\n","import { give, GiveOptions, GuestObjectType, GuestType } from \"./Guest\";\n\nexport interface GuestDisposableType<T = any> extends GuestObjectType<T> {\n  disposed(value: T | null): boolean;\n}\n\nexport type MaybeDisposableType<T = any> = Partial<GuestDisposableType<T>>;\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/guest/guest-disposable\n */\nexport class GuestDisposable<T> implements GuestDisposableType<T> {\n  public constructor(\n    private guest: GuestType,\n    private disposeCheck: (value: T | null) => boolean,\n  ) { }\n\n  public disposed(value: T | null): boolean {\n    return this.disposeCheck(value);\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.guest, options);\n    return this;\n  }\n}\n","import { GuestDisposableType } from \"../Guest/GuestDisposable\";\nimport { give, GiveOptions, GuestType } from \"../Guest/Guest\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron\n */\nexport class Patron<T> implements GuestDisposableType<T> {\n  public constructor(private willBePatron: GuestType<T>) { }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    give(value, this.willBePatron, options);\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.willBePatron as GuestDisposableType;\n    return maybeDisposable?.disposed?.(value) || false;\n  }\n}\n","import { PoolType } from \"./PatronPool\";\nimport { give, GuestType, GiveOptions } from \"../Guest/Guest\";\nimport {\n  GuestDisposableType,\n  MaybeDisposableType,\n} from \"../Guest/GuestDisposable\";\n\ntype PoolAware = {\n  pool?: PoolType;\n};\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/patron/patron-once\n */\nexport class PatronOnce<T> implements GuestDisposableType<T> {\n  private received = false;\n\n  public constructor(private baseGuest: GuestType<T>) { }\n\n  public introduction() {\n    return \"patron\" as const;\n  }\n\n  public give(value: T, options?: GiveOptions): this {\n    if (!this.received) {\n      give(value, this.baseGuest, options);\n    }\n    const data = options?.data as PoolAware;\n    if (data?.pool) {\n      data.pool.remove(this);\n    }\n    return this;\n  }\n\n  public disposed(value: T | null): boolean {\n    const maybeDisposable = this.baseGuest as MaybeDisposableType;\n    return maybeDisposable.disposed ? maybeDisposable.disposed(value) : false;\n  }\n}\n","interface Constructable<T> {\n  new(...args: unknown[]): T;\n}\n\ninterface Prototyped<T> {\n  prototype: T;\n}\n\nexport interface FactoryType<T> {\n  create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT;\n}\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/factory\n */\nexport class Factory<T> implements FactoryType<T> {\n  public constructor(\n    private constructorFn: Prototyped<T>,\n    private factories: Record<string, unknown> = {},\n  ) { }\n\n  public create<R extends unknown[], CT = null>(\n    ...args: R\n  ): CT extends null ? T : CT {\n    return new (this.constructorFn as Constructable<T>)(\n      ...args,\n      this.factories,\n    ) as CT extends null ? T : CT;\n  }\n}\n","import { FactoryType } from \"./Factory\";\n\n/**\n * @url https://kosukhin.github.io/patron.site/#/utils/module\n */\nexport class Module<T> implements FactoryType<T> {\n  public constructor(private buildingFn: (...args: any[]) => T) { }\n\n  public create<R extends unknown[], CT = null>(...args: R): CT extends null ? T : CT {\n    return this.buildingFn(...args) as CT extends null ? T : CT;\n  }\n}\n"],"names":["GuestAware","constructor","guestReceiver","this","value","guest","give","data","options","Guest","receiver","GuestCast","sourceGuest","targetGuest","introduction","disposed","maybeDisposable","poolSets","Map","removePatronFromPools","patron","forEach","pool","delete","isPatronInPools","inPool","has","PatronPool","initiator","__publicField","patrons","Set","set","lastMicrotask","doReceive","target","sendValueToGuest","currentMicroTask","queueMicrotask","size","add","shouldBePatron","Error","remove","distribute","receiving","possiblePatron","guestDisposed","Source","sourceDocument","thePool","GuestObject","baseGuest","GuestPool","patronPool","deliverToGuests","guests","clear","GuestChain","theChain","resultArray","guestObject","filledChainPool","Object","values","isChainFilled","chain","result","receiveKey","key","keysKnown","keysFilled","lastChain","SourceEmpty","baseSource","GuestAwareSequence","targetSourceFactory","sequenceSource","targetSource","create","index","nextItemHandle","handle","GuestAwareMap","val","innerGuest","GuestSync","theValue","GuestDisposable","disposeCheck","Patron","willBePatron","PatronOnce","received","Factory","constructorFn","factories","args","Module","buildingFn"],"mappings":"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"}